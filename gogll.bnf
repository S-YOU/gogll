//  Copyright 2019 Marius Ackerman
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

nt : _upcase {_idchar} ;
string : '"' _stringchar {_stringchar} '"' ;
charLiteral : '\'' ( _escapedchar | .) '\'' ;
_stringchar : . | _escapedchar ;
_escapedchar : '\\' ('"' | 'n' | 't' | 'r' | '\'' | '\\') ;
_upcase : 'A'-'Z' ;
_lowcase : 'a'-'z' ;
_idchar : _upcase | _lowcase | _number | '_' ;
_number : '0'-'9' ;

_blockComment : '/' '*' {. | '*'} '*' '/' ;
_lineComment : '/' '/' {.} '\n' ;

!comment : _lineComment | _blockComment ;
!whitespace : ' ' | '\t' | '\n' | '\r' ;

<< import "gogll/ast" >>

Grammar
    :   Package Rules                    << ast.NewGrammar($0, $1) >>
    |   Rules                           << ast.NewGrammar(nil, $0) >>
    ;

Package
    :   "package" string                    << ast.NewPackage($1) >>
    ;

Rules
    :   Rule                            << ast.NewRules($0) >>
    |   Rules Rule                      << ast.AddRule($0, $1) >>
    ;

Rule
    :   Head  ":"  Alternates  ";"         << ast.NewRule(false, $0, $2) >>
    |   "*" Head  ":"  Alternates  ";"      << ast.NewRule(true, $1, $3) >>
    ;

Head
    :   nt                                << ast.NewHead($0) >>
    ;

Alternates
    :   Alternates "|" Alternate        << ast.AddAlternate($0, $2) >>
    |   Alternate                       << ast.NewAlternates($0) >>
    ;

Alternate 
    :   Body                            << ast.NewAlternate($0) >>
    |   "emptyAlt"                         << ast.NewAlternate(nil) >>
    ;

Body
    :   Symbol                          << ast.NewBody($0) >>
    |   Body Symbol                     << ast.AppendSymbol($0, $1) >>
    ;

Symbol 
    :   nt                              << ast.NewID($0) >>
    |   string                          << ast.NewString($0) >>
    |   "any"                           << ast.NewAnyChar($0) >>
    |   "anyof" string                  << ast.NewAnyOf($1) >>
    |   "letter"                        << ast.NewLetter($0) >>
    |   "number"                        << ast.NewNumber($0) >>
    |   "upcase"                        << ast.NewUpCase($0) >>
    |   "lowcase"                       << ast.NewLowCase($0) >>
    |   "not" string                    << ast.NewNotString($1) >>
    |   "space"                         << ast.NewSpace($0) >>
    |   charLiteral                     << ast.NewCharLiteral($0) >>
    ;


