/*
Package ast generates the AST for Rust LR(1) parsers
*/
package ast

import (
	"bytes"
	"fmt"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/iancoleman/strcase"

	"github.com/goccmack/gogll/ast"
	"github.com/goccmack/gogll/cfg"
	"github.com/goccmack/gogll/lr1/basicprod"
	"github.com/goccmack/goutil/ioutil"
)

type Data struct {
	Package    string
	Types      []string
	BasicProds []*BasicProd
}

type BasicProd struct {
	Comment    string
	ID         string
	Params     []*Param
	ReturnType string
}

type Param struct {
	ID   string
	Type string
}

func Gen(pkg string, bprods []*basicprod.Production) {
	fname := filepath.Join(cfg.BaseDir, "src", "ast", "mod.rs")
	if ioutil.Exist(fname) && !*cfg.All {
		// Do not regenerate
		return
	}

	tmpl, err := template.New("AST").Parse(src)
	if err != nil {
		panic(err)
	}
	buf := new(bytes.Buffer)
	if err := tmpl.Execute(buf, getData(pkg, bprods)); err != nil {
		panic(err)
	}
	if err := ioutil.WriteFile(fname, buf.Bytes()); err != nil {
		panic(err)
	}
}

func getData(pkg string, bprods []*basicprod.Production) *Data {
	return &Data{
		Package:    pkg,
		Types:      getTypes(bprods),
		BasicProds: getBasicProds(bprods),
	}
}

func getBasicProds(bprods []*basicprod.Production) (prods []*BasicProd) {
	for _, prod := range bprods {
		prods = append(prods, getBasicProd(prod))
	}
	return
}

func getBasicProd(prod *basicprod.Production) *BasicProd {
	return &BasicProd{
		Comment: fmt.Sprintf("%s : %s ;",
			prod.Head,
			strings.Join(prod.Body.GetSymbols(), " ")),

		ID: fmt.Sprintf("%s_%d",
			strcase.ToSnake(prod.Head),
			prod.Alternate),

		Params: getParams(prod.Body),

		ReturnType: prod.Head,
	}
}

func getParams(body *ast.SyntaxAlternate) (params []*Param) {
	for i, sym := range body.Symbols {
		var param *Param
		if _, ok := sym.(*ast.NT); ok {
			param = &Param{
				ID:   strcase.ToLowerCamel(sym.String()),
				Type: sym.String(),
			}
		} else {
			param = &Param{
				ID:   fmt.Sprintf("symbol_%d", i),
				Type: "*token.Token",
			}

		}
		params = append(params, param)
	}
	return
}

func getTypes(bprods []*basicprod.Production) (types []string) {
	idMap := make(map[string]bool)
	for _, prod := range bprods {
		if _, exist := idMap[prod.Head]; !exist {
			types = append(types, prod.Head)
			idMap[prod.Head] = true
		}
	}
	return
}

const src = `//! Module ast is generated by GoGLL. Do not edit.

use crate::token;

use std::rc::Rc;

#[allow(dead_code)]
pub enum Node { 
	NT(NT),
	Token(Rc<token::Token>),
}

#[allow(dead_code)]
pub enum NT { {{range $typ := .Types}}
	{{$typ}}, {{end}}
}
{{range $bprod := .BasicProds}}{{$bp := $bprod}}
/// {{$bp.Comment}}
pub fn {{$bp.ID}}(mut params: Vec<Option<Box<Node>>>) -> Result<Option<Box<Node>>, String> {
    println!("ast.{{$bprod.ID}} is unimplemented");
    Ok(None)
}
{{end}}
`
