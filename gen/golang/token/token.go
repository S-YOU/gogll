/*
Copyright 2020 Marius Ackerman

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Package token generates a Go token package
package token

import (
	"bytes"
	"path/filepath"
	"text/template"

	"github.com/goccmack/gogll/ast"
	"github.com/goccmack/gogll/cfg"
	"github.com/goccmack/gogll/im/tokens"
	"github.com/goccmack/goutil/ioutil"
)

type Data struct {
	Types        []*TypeDef
	TypeToString []string
}

type TypeDef struct {
	Name, Comment string
}

func Gen(g *ast.GoGLL, ts *tokens.Tokens) {
	tmpl, err := template.New("Token").Parse(tmplSrc)
	if err != nil {
		panic(err)
	}
	buf := new(bytes.Buffer)
	err = tmpl.Execute(buf, getData(ts))
	if err != nil {
		panic(err)
	}
	if err = ioutil.WriteFile(tokenFile(g.Package.GetString()), buf.Bytes()); err != nil {
		panic(err)
	}
}

func getData(ts *tokens.Tokens) *Data {
	return &Data{
		Types:        getTypes(ts),
		TypeToString: ts.TypeToString,
	}
}

func getTypes(ts *tokens.Tokens) (types []*TypeDef) {
	for i := range ts.TypeToString {
		types = append(types,
			&TypeDef{
				Name:    ts.TypeToString[i],
				Comment: ts.TypeToLiteral[i],
			})
	}
	return
}

func tokenFile(pkg string) string {
	return filepath.Join(cfg.BaseDir, "token", "token.go")
}

const tmplSrc = `
/*
Generated by GoGLL. Do not edit
*/

package token

import(
	"fmt"
)

// Token is returned by the lexer for every scanned lexical token
type Token struct {
	typ        Type
	lext, rext int
	input      []rune
}

func New(t Type, lext, rext int, input []rune) *Token {
	return &Token{
		typ:   t,
		lext:  lext,
		rext:  rext,
		input: input,
	}
}

// GetLineColumn returns the line and column of rune[i] in the input
func (t *Token) GetLineColumn(i int) (line, col int) {
	line, col = 1, 1
	for j := 0; j < i; j++ {
		switch t.input[j] {
		case '\n':
			line++
			col = 1
		case '\t':
			col += 4
		default:
			col++
		}
	}
	return
}

// GetInput returns the input from which t was parsed.
func (t *Token) GetInput() []rune {
	return t.input
}

func (t *Token) Lext() int {
	return t.lext
}

func (t *Token) Literal() []rune {
	return t.input[t.lext:t.rext]
}

func (t *Token) LiteralString() string {
	return string(t.Literal())
}

func (t *Token) Rext() int {
	return t.rext
}

func (t *Token) String() string {
	return fmt.Sprintf("%s (%d,%d) %s",
		t.TypeID(), t.lext, t.rext, t.LiteralString())
}

func (t *Token) Type() Type {
	return t.typ
}

func (t *Token) TypeID() string {
	return t.Type().ID()
}

// Type is the token type
type Type int

func (t Type) String() string {
	return TypeToString[t]
}

func (t Type) ID() string {
	return TypeToID[t]
}


const({{range $i, $typ := .Types}}
	{{$typ.Name}} {{if eq $i 0}} Type = iota {{end}} // {{$typ.Comment}} {{end}}
)

var TypeToString = []string{ {{range $str := .TypeToString}}
	"{{$str}}",{{end}}
}

var StringToType = map[string] Type { {{range $typ := .TypeToString}}
	"{{$typ}}" : {{$typ}}, {{end}}
}

var TypeToID = []string { {{range $typ := .Types}}
	"{{$typ.Comment}}", {{end}}
}

`
