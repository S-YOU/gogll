// Code generated by gocc; DO NOT EDIT.

package parser

import "github.com/goccmack/gogll/ast"

type (
	//TODO: change type and variable names to be consistent with other tables
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : GoGLL	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `GoGLL : Package Rules	<< ast.NewGoGLL(X[0], X[1]) >>`,
		Id:         "GoGLL",
		NTType:     1,
		Index:      1,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGoGLL(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `Package : "package" string_lit	<< ast.NewPackage(X[1]) >>`,
		Id:         "Package",
		NTType:     2,
		Index:      2,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewPackage(X[1])
		},
	},
	ProdTabEntry{
		String: `Rules : Rule	<< ast.NewRules(X[0]) >>`,
		Id:         "Rules",
		NTType:     3,
		Index:      3,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewRules(X[0])
		},
	},
	ProdTabEntry{
		String: `Rules : Rules Rule	<< ast.AddRule(X[0], X[1]) >>`,
		Id:         "Rules",
		NTType:     3,
		Index:      4,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AddRule(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `Rule : NT ":" Alternates ";"	<< ast.NewRule(X[0], X[2]) >>`,
		Id:         "Rule",
		NTType:     4,
		Index:      5,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewRule(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `NT : nt	<< ast.NewNT(X[0]) >>`,
		Id:         "NT",
		NTType:     5,
		Index:      6,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewNT(X[0])
		},
	},
	ProdTabEntry{
		String: `Alternates : Alternate	<< ast.NewAlternates(X[0]) >>`,
		Id:         "Alternates",
		NTType:     6,
		Index:      7,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewAlternates(X[0])
		},
	},
	ProdTabEntry{
		String: `Alternates : Alternates "|" Alternate	<< ast.AddAlternate(X[0], X[2]) >>`,
		Id:         "Alternates",
		NTType:     6,
		Index:      8,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AddAlternate(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Alternate : Symbols	<< ast.NewAlternate(X[0]) >>`,
		Id:         "Alternate",
		NTType:     7,
		Index:      9,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewAlternate(X[0])
		},
	},
	ProdTabEntry{
		String: `Alternate : "empty"	<< ast.NewAlternate(X[0]) >>`,
		Id:         "Alternate",
		NTType:     7,
		Index:      10,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewAlternate(X[0])
		},
	},
	ProdTabEntry{
		String: `Symbols : Symbol	<< ast.NewSymbols(X[0]) >>`,
		Id:         "Symbols",
		NTType:     8,
		Index:      11,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewSymbols(X[0])
		},
	},
	ProdTabEntry{
		String: `Symbols : Symbols Symbol	<< ast.AddSymbol(X[0], X[1]) >>`,
		Id:         "Symbols",
		NTType:     8,
		Index:      12,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AddSymbol(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `Symbol : NT	<<  >>`,
		Id:         "Symbol",
		NTType:     9,
		Index:      13,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Symbol : Terminal	<<  >>`,
		Id:         "Symbol",
		NTType:     9,
		Index:      14,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Terminal : tokid	<< ast.NewTokID(X[0]) >>`,
		Id:         "Terminal",
		NTType:     10,
		Index:      15,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewTokID(X[0])
		},
	},
	ProdTabEntry{
		String: `Terminal : string_lit	<< ast.NewStringLit(X[0]) >>`,
		Id:         "Terminal",
		NTType:     10,
		Index:      16,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewStringLit(X[0])
		},
	},
}
