// Code generated by gocc; DO NOT EDIT.

package parser

import "gogll/ast"

type (
	//TODO: change type and variable names to be consistent with other tables
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Grammar	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Grammar : Package Rules	<< ast.NewGrammar(X[0], X[1]) >>`,
		Id:         "Grammar",
		NTType:     1,
		Index:      1,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGrammar(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `Grammar : Rules	<< ast.NewGrammar(nil, X[0]) >>`,
		Id:         "Grammar",
		NTType:     1,
		Index:      2,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGrammar(nil, X[0])
		},
	},
	ProdTabEntry{
		String: `Package : "package" string	<< ast.NewPackage(X[1]) >>`,
		Id:         "Package",
		NTType:     2,
		Index:      3,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewPackage(X[1])
		},
	},
	ProdTabEntry{
		String: `Rules : Rule	<< ast.NewRules(X[0]) >>`,
		Id:         "Rules",
		NTType:     3,
		Index:      4,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewRules(X[0])
		},
	},
	ProdTabEntry{
		String: `Rules : Rules Rule	<< ast.AddRule(X[0], X[1]) >>`,
		Id:         "Rules",
		NTType:     3,
		Index:      5,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AddRule(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `Rule : Head ":" Alternates ";"	<< ast.NewRule(false, X[0], X[2]) >>`,
		Id:         "Rule",
		NTType:     4,
		Index:      6,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewRule(false, X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Rule : "*" Head ":" Alternates ";"	<< ast.NewRule(true, X[1], X[3]) >>`,
		Id:         "Rule",
		NTType:     4,
		Index:      7,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewRule(true, X[1], X[3])
		},
	},
	ProdTabEntry{
		String: `Head : nt	<< ast.NewHead(X[0]) >>`,
		Id:         "Head",
		NTType:     5,
		Index:      8,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewHead(X[0])
		},
	},
	ProdTabEntry{
		String: `Alternates : Alternates "|" Alternate	<< ast.AddAlternate(X[0], X[2]) >>`,
		Id:         "Alternates",
		NTType:     6,
		Index:      9,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AddAlternate(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Alternates : Alternate	<< ast.NewAlternates(X[0]) >>`,
		Id:         "Alternates",
		NTType:     6,
		Index:      10,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewAlternates(X[0])
		},
	},
	ProdTabEntry{
		String: `Alternate : Body	<< ast.NewAlternate(X[0]) >>`,
		Id:         "Alternate",
		NTType:     7,
		Index:      11,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewAlternate(X[0])
		},
	},
	ProdTabEntry{
		String: `Alternate : "emptyAlt"	<< ast.NewAlternate(nil) >>`,
		Id:         "Alternate",
		NTType:     7,
		Index:      12,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewAlternate(nil)
		},
	},
	ProdTabEntry{
		String: `Body : Symbol	<< ast.NewBody(X[0]) >>`,
		Id:         "Body",
		NTType:     8,
		Index:      13,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewBody(X[0])
		},
	},
	ProdTabEntry{
		String: `Body : Body Symbol	<< ast.AppendSymbol(X[0], X[1]) >>`,
		Id:         "Body",
		NTType:     8,
		Index:      14,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AppendSymbol(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `Symbol : nt	<< ast.NewID(X[0]) >>`,
		Id:         "Symbol",
		NTType:     9,
		Index:      15,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewID(X[0])
		},
	},
	ProdTabEntry{
		String: `Symbol : string	<< ast.NewString(X[0]) >>`,
		Id:         "Symbol",
		NTType:     9,
		Index:      16,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewString(X[0])
		},
	},
	ProdTabEntry{
		String: `Symbol : "any"	<< ast.NewAnyChar(X[0]) >>`,
		Id:         "Symbol",
		NTType:     9,
		Index:      17,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewAnyChar(X[0])
		},
	},
	ProdTabEntry{
		String: `Symbol : "anyof" string	<< ast.NewAnyOf(X[1]) >>`,
		Id:         "Symbol",
		NTType:     9,
		Index:      18,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewAnyOf(X[1])
		},
	},
	ProdTabEntry{
		String: `Symbol : "letter"	<< ast.NewLetter(X[0]) >>`,
		Id:         "Symbol",
		NTType:     9,
		Index:      19,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewLetter(X[0])
		},
	},
	ProdTabEntry{
		String: `Symbol : "number"	<< ast.NewNumber(X[0]) >>`,
		Id:         "Symbol",
		NTType:     9,
		Index:      20,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewNumber(X[0])
		},
	},
	ProdTabEntry{
		String: `Symbol : "upcase"	<< ast.NewUpCase(X[0]) >>`,
		Id:         "Symbol",
		NTType:     9,
		Index:      21,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewUpCase(X[0])
		},
	},
	ProdTabEntry{
		String: `Symbol : "lowcase"	<< ast.NewLowCase(X[0]) >>`,
		Id:         "Symbol",
		NTType:     9,
		Index:      22,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewLowCase(X[0])
		},
	},
	ProdTabEntry{
		String: `Symbol : "not" string	<< ast.NewNotString(X[1]) >>`,
		Id:         "Symbol",
		NTType:     9,
		Index:      23,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewNotString(X[1])
		},
	},
	ProdTabEntry{
		String: `Symbol : "space"	<< ast.NewSpace(X[0]) >>`,
		Id:         "Symbol",
		NTType:     9,
		Index:      24,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewSpace(X[0])
		},
	},
	ProdTabEntry{
		String: `Symbol : charLiteral	<< ast.NewCharLiteral(X[0]) >>`,
		Id:         "Symbol",
		NTType:     9,
		Index:      25,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewCharLiteral(X[0])
		},
	},
}
