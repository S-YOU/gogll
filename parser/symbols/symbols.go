
// Generated by gogll. Do not edit.
//
//  Copyright 2019 Marius Ackerman
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

package symbols

type Symbol interface{
    isSymbol()
    IsNonTerminal() bool
    String() string
}

func (NT) isSymbol() {}
func (T) isSymbol() {}

// NT is the type of non-terminals symbols
type NT int
const( 
    NT_GoGLL NT = iota
    NT_LexAlternates 
    NT_LexBracket 
    NT_LexGroup 
    NT_LexOneOrMore 
    NT_LexOptional 
    NT_LexRule 
    NT_LexSymbol 
    NT_LexZeroOrMore 
    NT_NT 
    NT_Package 
    NT_RegExp 
    NT_Rule 
    NT_Rules 
    NT_SyntaxAlternate 
    NT_SyntaxAlternates 
    NT_SyntaxRule 
    NT_SyntaxSymbol 
    NT_SyntaxSymbols 
    NT_TokID 
    NT_UnicodeClass 
)

// T is the type of terminals symbols
type T int
const( 
    T_0 T = iota // ( 
    T_1  // ) 
    T_2  // . 
    T_3  // : 
    T_4  // ; 
    T_5  // < 
    T_6  // > 
    T_7  // [ 
    T_8  // ] 
    T_9  // any 
    T_10  // char_lit 
    T_11  // empty 
    T_12  // letter 
    T_13  // lowcase 
    T_14  // not 
    T_15  // nt 
    T_16  // number 
    T_17  // package 
    T_18  // space 
    T_19  // string_lit 
    T_20  // tokid 
    T_21  // upcase 
    T_22  // { 
    T_23  // | 
    T_24  // } 
)

type Symbols []Symbol

func (ss Symbols) Strings() []string {
    strs := make([]string, len(ss))
    for i, s := range ss {
        strs[i] = s.String()
    }
    return strs
}

func (NT) IsNonTerminal() bool {
    return true
}

func (T) IsNonTerminal() bool {
    return false
}

func (nt NT) String() string {
    return ntToString[nt]
}

func (t T) String() string {
    return tToString[t]
}

var ntToString = []string { 
    "GoGLL", /* NT_GoGLL */
    "LexAlternates", /* NT_LexAlternates */
    "LexBracket", /* NT_LexBracket */
    "LexGroup", /* NT_LexGroup */
    "LexOneOrMore", /* NT_LexOneOrMore */
    "LexOptional", /* NT_LexOptional */
    "LexRule", /* NT_LexRule */
    "LexSymbol", /* NT_LexSymbol */
    "LexZeroOrMore", /* NT_LexZeroOrMore */
    "NT", /* NT_NT */
    "Package", /* NT_Package */
    "RegExp", /* NT_RegExp */
    "Rule", /* NT_Rule */
    "Rules", /* NT_Rules */
    "SyntaxAlternate", /* NT_SyntaxAlternate */
    "SyntaxAlternates", /* NT_SyntaxAlternates */
    "SyntaxRule", /* NT_SyntaxRule */
    "SyntaxSymbol", /* NT_SyntaxSymbol */
    "SyntaxSymbols", /* NT_SyntaxSymbols */
    "TokID", /* NT_TokID */
    "UnicodeClass", /* NT_UnicodeClass */ 
}

var tToString = []string { 
    "(", /* T_0 */
    ")", /* T_1 */
    ".", /* T_2 */
    ":", /* T_3 */
    ";", /* T_4 */
    "<", /* T_5 */
    ">", /* T_6 */
    "[", /* T_7 */
    "]", /* T_8 */
    "any", /* T_9 */
    "char_lit", /* T_10 */
    "empty", /* T_11 */
    "letter", /* T_12 */
    "lowcase", /* T_13 */
    "not", /* T_14 */
    "nt", /* T_15 */
    "number", /* T_16 */
    "package", /* T_17 */
    "space", /* T_18 */
    "string_lit", /* T_19 */
    "tokid", /* T_20 */
    "upcase", /* T_21 */
    "{", /* T_22 */
    "|", /* T_23 */
    "}", /* T_24 */ 
}

var stringNT = map[string]NT{ 
	"GoGLL":NT_GoGLL,
	"LexAlternates":NT_LexAlternates,
	"LexBracket":NT_LexBracket,
	"LexGroup":NT_LexGroup,
	"LexOneOrMore":NT_LexOneOrMore,
	"LexOptional":NT_LexOptional,
	"LexRule":NT_LexRule,
	"LexSymbol":NT_LexSymbol,
	"LexZeroOrMore":NT_LexZeroOrMore,
	"NT":NT_NT,
	"Package":NT_Package,
	"RegExp":NT_RegExp,
	"Rule":NT_Rule,
	"Rules":NT_Rules,
	"SyntaxAlternate":NT_SyntaxAlternate,
	"SyntaxAlternates":NT_SyntaxAlternates,
	"SyntaxRule":NT_SyntaxRule,
	"SyntaxSymbol":NT_SyntaxSymbol,
	"SyntaxSymbols":NT_SyntaxSymbols,
	"TokID":NT_TokID,
	"UnicodeClass":NT_UnicodeClass,
}
