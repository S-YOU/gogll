
// Generated by gogll. Do not edit.
//
//  Copyright 2019 Marius Ackerman
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

package symbols

type Symbol interface{
    isSymbol()
    IsNonTerminal() bool
    String() string
}

func (NT) isSymbol() {}
func (T) isSymbol() {}

// NT is the type of non-terminals symbols
type NT int
const( 
    NT_Alternate NT = iota
    NT_Alternates 
    NT_GoGLL 
    NT_NT 
    NT_Package 
    NT_Rule 
    NT_Rules 
    NT_Symbol 
    NT_Symbols 
)

// T is the type of terminals symbols
type T int
const( 
    T_0 T = iota // : 
    T_1  // ; 
    T_2  // empty 
    T_3  // nt 
    T_4  // package 
    T_5  // string_lit 
    T_6  // tokid 
    T_7  // | 
)

type Symbols []Symbol

func (ss Symbols) Strings() []string {
    strs := make([]string, len(ss))
    for i, s := range ss {
        strs[i] = s.String()
    }
    return strs
}

func (NT) IsNonTerminal() bool {
    return true
}

func (T) IsNonTerminal() bool {
    return false
}

func (nt NT) String() string {
    return ntToString[nt]
}

func (t T) String() string {
    return tToString[t]
}

var ntToString = []string { 
    "Alternate", /* NT_Alternate */
    "Alternates", /* NT_Alternates */
    "GoGLL", /* NT_GoGLL */
    "NT", /* NT_NT */
    "Package", /* NT_Package */
    "Rule", /* NT_Rule */
    "Rules", /* NT_Rules */
    "Symbol", /* NT_Symbol */
    "Symbols", /* NT_Symbols */ 
}

var tToString = []string { 
    ":", /* T_0 */
    ";", /* T_1 */
    "empty", /* T_2 */
    "nt", /* T_3 */
    "package", /* T_4 */
    "string_lit", /* T_5 */
    "tokid", /* T_6 */
    "|", /* T_7 */ 
}

var stringNT = map[string]NT{ 
	"Alternate":NT_Alternate,
	"Alternates":NT_Alternates,
	"GoGLL":NT_GoGLL,
	"NT":NT_NT,
	"Package":NT_Package,
	"Rule":NT_Rule,
	"Rules":NT_Rules,
	"Symbol":NT_Symbol,
	"Symbols":NT_Symbols,
}
