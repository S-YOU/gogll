
/*
Generated by GoGLL. Do not edit
*/

package token

import(
    "fmt"
)

// Token is returned by the lexer for every scanned lexical token
type Token struct {
    Type Type
    Lext, Rext int
    Literal []rune
}

// Type is the token type
type Type = int
const(
    Error Type = iota
    EOF 
    Type0 // (
    Type1 // )
    Type2 // .
    Type3 // :
    Type4 // ;
    Type5 // <
    Type6 // >
    Type7 // [
    Type8 // ]
    Type9 // any
    Type10 // char_lit
    Type11 // empty
    Type12 // letter
    Type13 // lowcase
    Type14 // not
    Type15 // nt
    Type16 // number
    Type17 // package
    Type18 // space
    Type19 // string_lit
    Type20 // tokid
    Type21 // upcase
    Type22 // {
    Type23 // |
    Type24 // }
)

var TypeToString = []string{
    "Error",
    "EOF", 
    "(",
    ")",
    ".",
    ":",
    ";",
    "<",
    ">",
    "[",
    "]",
    "any",
    "char_lit",
    "empty",
    "letter",
    "lowcase",
    "not",
    "nt",
    "number",
    "package",
    "space",
    "string_lit",
    "tokid",
    "upcase",
    "{",
    "|",
    "}",
}

var StringToType = map[string] int {
    "Error": Error,
    "EOF": EOF, 
    "(": Type0,
    ")": Type1,
    ".": Type2,
    ":": Type3,
    ";": Type4,
    "<": Type5,
    ">": Type6,
    "[": Type7,
    "]": Type8,
    "any": Type9,
    "char_lit": Type10,
    "empty": Type11,
    "letter": Type12,
    "lowcase": Type13,
    "not": Type14,
    "nt": Type15,
    "number": Type16,
    "package": Type17,
    "space": Type18,
    "string_lit": Type19,
    "tokid": Type20,
    "upcase": Type21,
    "{": Type22,
    "|": Type23,
    "}": Type24,
}

func New(t Type, lext, rext int, lit []rune) *Token {
    return &Token{
        Type: t,
        Lext: lext,
        Rext: rext,
        Literal: lit,
    }
}

func (t *Token) CharValue() rune {
	if t.Literal[1] != '\\' {
		return t.Literal[1]
	}
	switch t.Literal[2] {
	case '\\':
		return '\\'
	case '\'':
		return '\''
	case 'n':
		return '\n'
	case 'r':
		return '\r'
	case 't':
		return '\t'
	}
	panic(fmt.Sprintf("invalid escaped char: %s", string(t.Literal)))
}

func (t *Token) String() string {
	return fmt.Sprintf("%s (%d,%d) %s",
		TypeToString[t.Type], t.Lext, t.Rext, string(t.Literal))
}
