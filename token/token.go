
/*
Generated by GoGLL. Do not edit
*/

package token

import(
	"fmt"
)

// Token is returned by the lexer for every scanned lexical token
type Token struct {
	Type       Type
	Lext, Rext int
	Literal    []rune
}

// Type is the token type
type Type int
const(
	Error  Type = iota  // Error 
	EOF  // EOF 
	Type0  // ' 
	Type1  // ( 
	Type2  // ) 
	Type3  // . 
	Type4  // : 
	Type5  // ; 
	Type6  // < 
	Type7  // > 
	Type8  // [ 
	Type9  // \" 
	Type10  // \\ 
	Type11  // ] 
	Type12  // _ 
	Type13  // any 
	Type14  // char_lit 
	Type15  // empty 
	Type16  // letter 
	Type17  // lowcase 
	Type18  // not 
	Type19  // nt 
	Type20  // number 
	Type21  // package 
	Type22  // string_lit 
	Type23  // tokid 
	Type24  // upcase 
	Type25  // { 
	Type26  // | 
	Type27  // } 
)

var TypeToString = []string{ 
	"Error",
	"EOF",
	"Type0",
	"Type1",
	"Type2",
	"Type3",
	"Type4",
	"Type5",
	"Type6",
	"Type7",
	"Type8",
	"Type9",
	"Type10",
	"Type11",
	"Type12",
	"Type13",
	"Type14",
	"Type15",
	"Type16",
	"Type17",
	"Type18",
	"Type19",
	"Type20",
	"Type21",
	"Type22",
	"Type23",
	"Type24",
	"Type25",
	"Type26",
	"Type27",
}

var StringToType = map[string] Type { 
	"Error" : Error, 
	"EOF" : EOF, 
	"Type0" : Type0, 
	"Type1" : Type1, 
	"Type2" : Type2, 
	"Type3" : Type3, 
	"Type4" : Type4, 
	"Type5" : Type5, 
	"Type6" : Type6, 
	"Type7" : Type7, 
	"Type8" : Type8, 
	"Type9" : Type9, 
	"Type10" : Type10, 
	"Type11" : Type11, 
	"Type12" : Type12, 
	"Type13" : Type13, 
	"Type14" : Type14, 
	"Type15" : Type15, 
	"Type16" : Type16, 
	"Type17" : Type17, 
	"Type18" : Type18, 
	"Type19" : Type19, 
	"Type20" : Type20, 
	"Type21" : Type21, 
	"Type22" : Type22, 
	"Type23" : Type23, 
	"Type24" : Type24, 
	"Type25" : Type25, 
	"Type26" : Type26, 
	"Type27" : Type27, 
}

var TypeToID = []string { 
	"Error", 
	"EOF", 
	"'", 
	"(", 
	")", 
	".", 
	":", 
	";", 
	"<", 
	">", 
	"[", 
	"\"", 
	"\\", 
	"]", 
	"_", 
	"any", 
	"char_lit", 
	"empty", 
	"letter", 
	"lowcase", 
	"not", 
	"nt", 
	"number", 
	"package", 
	"string_lit", 
	"tokid", 
	"upcase", 
	"{", 
	"|", 
	"}", 
}

func New(t Type, lext, rext int, lit []rune) *Token {
	return &Token{
		Type: t,
		Lext: lext,
		Rext: rext,
		Literal: lit,
	}
}

func (t *Token) String() string {
	return fmt.Sprintf("%s (%d,%d) %s",
		t.TypeID(), t.Lext, t.Rext, string(t.Literal))
}

func (t Type) String() string {
	return TypeToString[t]
}

func (t *Token) TypeID() string {
	return t.Type.ID()
}

func (t Type) ID() string {
	return TypeToID[t]
}

