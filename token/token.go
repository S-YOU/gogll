
/*
Generated by GoGLL. Do not edit
*/

package token

import(
    "fmt"
)

// Token is returned by the lexer for every scanned lexical token
type Token struct {
    Type Type
    Lext, Rext int
    Literal string
}

// Type is the token type
type Type = int
const(
    Error Type = iota
    EOF 
    Type0 // :
    Type1 // ;
    Type2 // empty
    Type3 // id
    Type4 // package
    Type5 // string_lit
    Type6 // |
)

var TypeToString = []string{
    "Error",
    "EOF", 
    ":",
    ";",
    "empty",
    "id",
    "package",
    "string_lit",
    "|",
}

var StringToType = map[string] int {
    "Error": Error,
    "EOF": EOF, 
    ":": Type0,
    ";": Type1,
    "empty": Type2,
    "id": Type3,
    "package": Type4,
    "string_lit": Type5,
    "|": Type6,
}

func New(t Type, lext, rext int, lit []rune) *Token {
    return &Token{
        Type: t,
        Lext: lext,
        Rext: rext,
        Literal: string(lit),
    }
}

func (t *Token) String() string {
	return fmt.Sprintf("%s (%d,%d) %s",
		TypeToString[t.Type], t.Lext, t.Rext, t.Literal)
}
