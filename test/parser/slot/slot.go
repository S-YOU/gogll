
/* 
Package slot is generated by gogll. Do not edit. 
*/
package slot

import(
	"bytes"
	"fmt"
)

type Label int

type Slot struct {
	NT      string
	Alt     int
	Pos     int
	Symbols []string
	Label 	Label
}

type Index struct {
	NT      string
	Alt     int
	Pos     int
}

func GetAlternates(nt string) []Label {
	alts, exist := alternates[nt]
	if !exist {
		panic(fmt.Sprintf("Invalid NT %s", nt))
	}
	return alts
}

func GetLabel(nt string, alt, pos int) Label {
	l, exist := slotIndex[Index{nt,alt,pos}]
	if exist {
		return l
	}
	panic(fmt.Sprintf("Error: no slot label for NT=%s, alt=%d, pos=%d", nt, alt, pos))
}

func (l Label) EoR() bool {
	return l.Slot().EoR()
}

func (l Label) Head() string {
	return l.Slot().NT
}

func (l Label) Index() Index {
	s := l.Slot()
	return Index{s.NT, s.Alt, s.Pos}
}

func (l Label) Alternate() int {
	return l.Slot().Alt
}

func (l Label) Pos() int {
	return l.Slot().Pos
}

func (l Label) Slot() *Slot {
	s, exist := slots[l]
	if !exist {
		panic(fmt.Sprintf("Invalid slot label %d", l))
	}
	return s
}

func (l Label) String() string {
	return l.Slot().String()
}

func (l Label) Symbols() []string {
	return l.Slot().Symbols
}

func (s *Slot) EoR() bool {
	return s.Pos >= len(s.Symbols)
}

func (s *Slot) String() string {
	buf := new(bytes.Buffer)
	fmt.Fprintf(buf, "%s : ", s.NT)
	for i, sym := range s.Symbols {
		if i == s.Pos {
			fmt.Fprintf(buf, "∙")
		}
		fmt.Fprintf(buf, "%s ", sym)
	}
	if s.Pos >= len(s.Symbols) {
		fmt.Fprintf(buf, "∙")
	}
	return buf.String()
}

const(
	S0R0 Label = iota
	S0R1
)

var slots = map[Label]*Slot{ 
	S0R0:&Slot{"S", 0, 0, []string{ `not("\"")` }, S0R0 },
	S0R1:&Slot{"S", 0, 1, []string{ `not("\"")` }, S0R1 },
}

var slotIndex = map[Index]Label { 
	Index{ "S",0,0 }: S0R0,
	Index{ "S",0,1 }: S0R1,
}

var alternates = map[string][]Label{ 
	"S":[]Label{ S0R0 },
}

