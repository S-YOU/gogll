var searchIndex={};
searchIndex["empty"] = {"doc":"","i":[[5,"main","empty","",null,[[]]],[5,"test1","","",null,[[["rc",["vec"]],["vec",["char"]]]]],[5,"test2","","",null,[[["rc",["vec"]],["vec",["char"]]]]],[0,"lexer","","Module lexer is generated by GoGLL. Do not edit.",null,null],[3,"Lexer","empty::lexer","Lexer contains both the input Vec and the Vectoken::Token…",null,null],[12,"i","","i is the input vector of char",0,null],[12,"tokens","","tokens is the vector of tokens constructed by the lexer…",0,null],[5,"load_file","","",null,[[["string"]],[["result",["vec"]],["vec",["char"]]]]],[5,"load_md","","",null,[[["vec"]],["result"]]],[5,"any","","",null,[[["char"]],["bool"]]],[5,"not","","",null,[[["char"]],["bool"]]],[6,"State","","",null,null],[6,"NextFun","","",null,null],[7,"ACCEPT","","",null,null],[7,"NEXT_STATE","","",null,null],[17,"NULL_STATE","","",null,null],[11,"new_file","","new_file constructs a Lexer created from the input file,…",0,[[["string"]],[["result",["rc"]],["rc",["lexer"]]]]],[11,"new","","new constructs a Lexer from a Vec. ",0,[[["rc",["vec"]],["vec",["char"]]],[["lexer"],["rc",["lexer"]]]]],[11,"add","","",0,[[["type"],["usize"],["self"]]]],[11,"add_token","","",0,[[["self"],["rc",["token"]],["token"]]]],[11,"scan","","",0,[[["self"],["usize"]],[["rc",["token"]],["token"]]]],[11,"get_line_column","","get_line_column returns the (line, column) of char[i] in…",0,[[["self"],["usize"]]]],[11,"get_line_column_of_token","","get_line_column_of_token returns the (line, column) of…",0,[[["self"],["usize"]]]],[11,"get_string","","",0,[[["self"],["usize"]],["string"]]],[0,"parser","empty","Module parser is generated by GoGLL. Do not edit.",null,null],[3,"Parser","empty::parser","",null,null],[12,"c_i","","",1,null],[12,"r","","",1,null],[12,"u","","",1,null],[12,"popped","","",1,null],[12,"crf","","",1,null],[12,"crf_nodes","","",1,null],[12,"lex","","",1,null],[12,"errors","","",1,null],[12,"bsr_set","","",1,null],[3,"Descriptor","","",null,null],[12,"l","","",2,null],[12,"k","","",2,null],[12,"i","","",2,null],[3,"Error","","Error is returned by Parse at every point at which the…",null,null],[12,"c_i","","Index of token that caused the error.",3,null],[12,"slot","","Grammar slot at which the error occured.",3,null],[12,"token","","The token at which the error occurred.",3,null],[12,"expected","","The tokens expected at the point where the error occurred",3,null],[12,"line","","The line in the input where the error occurred",3,null],[12,"column","","The column on the line where the error occurred",3,null],[3,"ParseError","","",null,null],[12,"c_i","","",4,null],[12,"slot","","",4,null],[12,"token","","",4,null],[12,"expected","","",4,null],[3,"PoppedNode","","",null,null],[12,"x","","",5,null],[12,"k","","",5,null],[12,"j","","",5,null],[3,"ClusterNode","","",null,null],[12,"x","","",6,null],[12,"k","","",6,null],[3,"CRFNode","","",null,null],[12,"l","","",7,null],[12,"i","","",7,null],[3,"FIRST","","",null,null],[12,"__private_field","","",8,null],[3,"FOLLOW","","",null,null],[12,"__private_field","","",9,null],[4,"Expected","","",null,null],[13,"First","","",10,null],[13,"Follow","","",10,null],[5,"parse","","Parse returns the BSR set containing the parse forest. If…",null,[[["rc",["lexer"]],["lexer"]]]],[0,"bsr","","",null,null],[3,"Set","empty::parser::bsr","Set contains the set of Binary Subtree Representations…",null,null],[12,"slot_entries","","",11,null],[12,"nt_slot_entries","","",11,null],[12,"string_entries","","",11,null],[12,"rext","","",11,null],[12,"lex","","",11,null],[12,"start_sym","","",11,null],[3,"NTSlot","","",null,null],[12,"nt","","",12,null],[12,"lext","","",12,null],[12,"rext","","",12,null],[3,"BSR","","BSR is the binary subtree representation of a parsed…",null,null],[12,"label","","",13,null],[12,"lext","","",13,null],[12,"pivot","","",13,null],[12,"rext","","",13,null],[4,"Kind","","",null,null],[13,"NT","","",14,null],[13,"Str","","",14,null],[5,"fail","","",null,[[["string"]]]],[11,"cmp","","",13,[[["self"]],["ordering"]]],[11,"new","","New returns a new initialised BSR Set",11,[[["nt"],["rc",["lexer"]],["lexer"]],[["box",["set"]],["set"]]]],[11,"add","","Add a BSR to the set. (i,j) is the extent. k is the pivot.",11,[[["label"],["usize"],["self"]]]],[11,"alternate","","Returns the index of the grammar rule alternate.",11,[[["rc",["bsr"]],["self"],["bsr"]],["usize"]]],[11,"insert","","",11,[[["self"],["kind"]]]],[11,"add_empty","","AddEmpty adds a grammar slot: X : ϵ•",11,[[["self"],["label"],["usize"]]]],[11,"contain","","contain returns true iff the BSR Set contains the NT…",11,[[["usize"],["self"],["nt"]],["bool"]]],[11,"get_all","","Returns all the NT BSR entries. Used for debugging.",11,[[["self"]],[["rc",["bsr"]],["vec",["rc"]]]]],[11,"get_root","","",11,[[["self"]],[["rc",["bsr"]],["bsr"]]]],[11,"get_roots","","",11,[[["self"]],[["rc",["bsr"]],["vec",["rc"]]]]],[11,"get_line_column","","Return the (line, column) of the left extent of token i.",11,[[["self"],["usize"]]]],[11,"get_nt_child_i","","",11,[[["usize"],["bsr"],["rc",["bsr"]],["self"]],[["rc",["bsr"]],["bsr"]]]],[11,"get_nt_children_i","","",11,[[["usize"],["bsr"],["rc",["bsr"]],["self"]],["vec"]]],[11,"get_nt_slot","","",11,[[["usize"],["symbol"],["self"]],["vec"]]],[11,"get_string","","",11,[[["usize"],["label"],["self"]],[["rc",["bsr"]],["bsr"]]]],[11,"get_t_child_i","","GetTChildI returns the terminal symbol at position i in b.…",11,[[["usize"],["bsr"],["rc",["bsr"]],["self"]],[["token"],["rc",["token"]]]]],[11,"is_ambiguous","","Returns true if the BSR set does not have exactly one…",11,[[["self"]],["bool"]]],[11,"is_ambiguous_bsr","","Returns true if b or any of its NT children is ambiguous.…",11,[[["rc",["bsr"]],["self"],["bsr"]],["bool"]]],[11,"rext","","",14,[[["self"]],["usize"]]],[11,"new","","",12,[[["nt"],["usize"]],["ntslot"]]],[0,"slot","empty::parser","Module slot is generated by gogll. Do not edit. ",null,null],[3,"Slot","empty::parser::slot","",null,null],[12,"nt","","",15,null],[12,"alt","","",15,null],[12,"pos","","",15,null],[12,"symbols","","",15,null],[12,"label","","",15,null],[3,"Index","","",null,null],[12,"nt","","",16,null],[12,"alt","","",16,null],[12,"pos","","",16,null],[3,"ALTERNATES","","",null,null],[12,"__private_field","","",17,null],[3,"LABELS","","",null,null],[12,"__private_field","","",18,null],[3,"SLOTS","","",null,null],[12,"__private_field","","",19,null],[4,"Label","","",null,null],[13,"A10R0","","",20,null],[13,"A10R1","","",20,null],[13,"A10R2","","",20,null],[13,"Name0R0","","",20,null],[13,"Name0R1","","",20,null],[13,"Name1R0","","",20,null],[5,"get_alternates","","",null,[[["nt"]],["vec"]]],[5,"get_label","","",null,[[["nt"],["usize"]],["label"]]],[11,"eor","","",20,[[["self"]],["bool"]]],[11,"head","","",20,[[["self"]],["nt"]]],[11,"index","","",20,[[["self"]],["index"]]],[11,"alternate","","",20,[[["self"]],["usize"]]],[11,"pos","","",20,[[["self"]],["usize"]]],[11,"slot","","",20,[[["self"]],["slot"]]],[11,"symbols","","",20,[[["self"]],["vec"]]],[11,"eor","","",15,[[["self"]],["bool"]]],[0,"symbols","empty::parser","",null,null],[4,"Symbol","empty::parser::symbols","",null,null],[13,"NT","","",21,null],[13,"T","","",21,null],[4,"NT","","",null,null],[13,"A1","","",22,null],[13,"Name","","",22,null],[4,"T","","",null,null],[13,"T0","","",23,null],[13,"T1","","",23,null],[5,"to_string","","Format a &Vec into a String",null,[[["vec"]],["string"]]],[11,"is_nt","","",21,[[["self"]],["bool"]]],[11,"new","empty::parser","",1,[[["rc",["lexer"]],["lexer"]],[["parser"],["box",["parser"]]]]],[11,"parse","","",1,[[["self"]]]],[11,"nt_add","","",1,[[["nt"],["self"],["usize"]]]],[11,"call","","",1,[[["usize"],["self"],["label"]]]],[11,"rtn","","",1,[[["usize"],["nt"],["self"]]]],[11,"dsc_add","","",1,[[["usize"],["self"],["label"]]]],[11,"r_remove","","",1,[[["self"]]]],[11,"error_first","","",1,[[["self"],["usize"],["label"]]]],[11,"error_follow","","",1,[[["usize"],["nt"],["self"],["label"]]]],[11,"export_errors","","",1,[[["self"]],[["box",["error"]],["vec",["box"]]]]],[11,"test_select","","",1,[[["self"],["label"]],["bool"]]],[11,"follow","","",1,[[["nt"],["self"]],["bool"]]],[11,"new","","",6,[[["nt"],["usize"]],["clusternode"]]],[11,"new","","",7,[[["usize"],["label"]],["crfnode"]]],[11,"new","","",2,[[["usize"],["label"]],[["rc",["descriptor"]],["descriptor"]]]],[11,"new","","",5,[[["nt"],["usize"]],[["box",["poppednode"]],["poppednode"]]]],[0,"token","empty","Module token is generated by GoGLL. Do not edit",null,null],[3,"Token","empty::token","Token is returned by the lexer for every scanned lexical…",null,null],[12,"typ","","",24,null],[12,"lext","","",24,null],[12,"rext","","",24,null],[12,"input","","",24,null],[3,"TYPE_TO_STRING","","",null,null],[12,"__private_field","","",25,null],[3,"STRING_TO_TYPE","","",null,null],[12,"__private_field","","",26,null],[4,"Type","","",null,null],[13,"Error","","",27,null],[13,"EOF","","",27,null],[13,"T_0","","",27,null],[13,"T_1","","",27,null],[5,"new","","New returns a new token. lext is the left extent and rext…",null,[[["rc"],["type"],["usize"]],[["token"],["rc",["token"]]]]],[11,"get_line_column","","get_line_column returns the (line, column) of the left…",24,[[["self"]]]],[11,"literal","","literal returns the literal runes of t scanned by the lexer",24,[[["self"]],[["vec",["char"]],["char"]]]],[11,"literal_string","","literal_string returs the literal string of t scanned by…",24,[[["self"]],["string"]]],[11,"id","","id returns the token type ID of token Type t",27,[[["self"]],["str"]]],[11,"from","empty::lexer","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","empty::parser","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","empty::parser::bsr","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_string","","",13,[[["self"]],["string"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","empty::parser::slot","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_string","","",15,[[["self"]],["string"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"to_string","","",20,[[["self"]],["string"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","empty::parser::symbols","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"to_string","","",21,[[["self"]],["string"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,[[["self"],["t"]]]],[11,"to_string","","",22,[[["self"]],["string"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"to_string","","",23,[[["self"]],["string"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"from","empty::token","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"to_string","","",24,[[["self"]],["string"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,[[["self"],["t"]]]],[11,"to_string","","",27,[[["self"]],["string"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"clone","empty::parser::slot","",20,[[["self"]],["label"]]],[11,"clone","empty::parser::symbols","",22,[[["self"]],["nt"]]],[11,"clone","empty::parser","",5,[[["self"]],["poppednode"]]],[11,"clone","","",6,[[["self"]],["clusternode"]]],[11,"clone","","",7,[[["self"]],["crfnode"]]],[11,"clone","empty::token","",27,[[["self"]],["type"]]],[11,"eq","empty::parser::bsr","",12,[[["ntslot"],["self"]],["bool"]]],[11,"ne","","",12,[[["ntslot"],["self"]],["bool"]]],[11,"eq","","",13,[[["bsr"],["self"]],["bool"]]],[11,"ne","","",13,[[["bsr"],["self"]],["bool"]]],[11,"eq","empty::parser::slot","",20,[[["self"],["label"]],["bool"]]],[11,"eq","","",16,[[["index"],["self"]],["bool"]]],[11,"ne","","",16,[[["index"],["self"]],["bool"]]],[11,"eq","empty::parser::symbols","",21,[[["symbol"],["self"]],["bool"]]],[11,"ne","","",21,[[["symbol"],["self"]],["bool"]]],[11,"eq","","",22,[[["self"],["nt"]],["bool"]]],[11,"eq","","",23,[[["t"],["self"]],["bool"]]],[11,"eq","empty::parser","",2,[[["self"],["descriptor"]],["bool"]]],[11,"ne","","",2,[[["self"],["descriptor"]],["bool"]]],[11,"eq","","",5,[[["self"],["poppednode"]],["bool"]]],[11,"ne","","",5,[[["self"],["poppednode"]],["bool"]]],[11,"eq","","",6,[[["clusternode"],["self"]],["bool"]]],[11,"ne","","",6,[[["clusternode"],["self"]],["bool"]]],[11,"eq","","",7,[[["crfnode"],["self"]],["bool"]]],[11,"ne","","",7,[[["crfnode"],["self"]],["bool"]]],[11,"eq","empty::token","",27,[[["type"],["self"]],["bool"]]],[11,"deref","empty::parser::slot","",17,[[["self"]],["hashmap"]]],[11,"deref","","",18,[[["self"]],["hashmap"]]],[11,"deref","","",19,[[["self"]],["hashmap"]]],[11,"deref","empty::parser","",8,[[["self"]],["hashmap"]]],[11,"deref","","",9,[[["self"]],["hashmap"]]],[11,"deref","empty::token","",25,[[["self"]],["hashmap"]]],[11,"deref","","",26,[[["self"]],["hashmap"]]],[11,"fmt","empty::parser::slot","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","empty::parser::symbols","",22,[[["formatter"],["self"]],["result"]]],[11,"fmt","empty::parser","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","empty::parser::bsr","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","empty::parser::slot","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","empty::parser::symbols","",22,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",23,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","empty::parser","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","empty::token","",24,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",27,[[["formatter"],["self"]],["result"]]],[11,"hash","empty::parser::bsr","",12,[[["self"],["__h"]]]],[11,"hash","","",13,[[["self"],["__h"]]]],[11,"hash","empty::parser::slot","",20,[[["self"],["__h"]]]],[11,"hash","","",16,[[["self"],["__h"]]]],[11,"hash","empty::parser::symbols","",21,[[["self"],["__h"]]]],[11,"hash","","",22,[[["self"],["__h"]]]],[11,"hash","","",23,[[["self"],["__h"]]]],[11,"hash","empty::parser","",2,[[["self"],["__h"]]]],[11,"hash","","",5,[[["self"],["__h"]]]],[11,"hash","","",6,[[["self"],["__h"]]]],[11,"hash","","",7,[[["self"],["__h"]]]],[11,"hash","empty::token","",27,[[["self"],["__h"]]]],[11,"initialize","empty::parser::slot","",17,[[["self"]]]],[11,"initialize","","",18,[[["self"]]]],[11,"initialize","","",19,[[["self"]]]],[11,"initialize","empty::parser","",8,[[["self"]]]],[11,"initialize","","",9,[[["self"]]]],[11,"initialize","empty::token","",25,[[["self"]]]],[11,"initialize","","",26,[[["self"]]]]],"p":[[3,"Lexer"],[3,"Parser"],[3,"Descriptor"],[3,"Error"],[3,"ParseError"],[3,"PoppedNode"],[3,"ClusterNode"],[3,"CRFNode"],[3,"FIRST"],[3,"FOLLOW"],[4,"Expected"],[3,"Set"],[3,"NTSlot"],[3,"BSR"],[4,"Kind"],[3,"Slot"],[3,"Index"],[3,"ALTERNATES"],[3,"LABELS"],[3,"SLOTS"],[4,"Label"],[4,"Symbol"],[4,"NT"],[4,"T"],[3,"Token"],[3,"TYPE_TO_STRING"],[3,"STRING_TO_TYPE"],[4,"Type"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","i":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes…",null,[[["t"]]]],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy…",null,null],[14,"lazy_static","","",null,null]],"p":[]};
addSearchOptions(searchIndex);initSearch(searchIndex);