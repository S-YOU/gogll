//! Module ast is generated by GoGLL. Do not edit.

use crate::token;

use std::rc::Rc;

#[allow(dead_code)]
pub enum Node { 
	NT(NT),
	T(Rc<token::Token>),
}

pub enum NT { 
	G0, 
	E1, 
	T1, 
}

/// G0 : E1 ;
pub fn g_0_0(params: Vec<Option<Box<Node>>>) -> Result<Option<Box<Node>>, String> {
    println!("ast.g_0_0 is unimplemented");
    Ok(None)
}

/// E1 : E1 + T1 ;
pub fn e_1_0(params: Vec<Option<Box<Node>>>) -> Result<Option<Box<Node>>, String> {
    println!("ast.e_1_0 is unimplemented");
    Ok(None)
}

/// E1 : T1 ;
pub fn e_1_1(params: Vec<Option<Box<Node>>>) -> Result<Option<Box<Node>>, String> {
    println!("ast.e_1_1 is unimplemented");
    Ok(None)
}

/// T1 : a ;
pub fn t_1_0(params: Vec<Option<Box<Node>>>) -> Result<Option<Box<Node>>, String> {
    println!("ast.t_1_0 is unimplemented");
    Ok(None)
}

