//! Generated by GoGLL. Do not edit.

use crate::ast;
use lazy_static::lazy_static;

pub struct ProdTabEntry {
	pub string: String,
	id: String,
	pub nt_type: usize,
	index: usize,
	pub num_symbols: usize,
	pub reduce_func: fn(Vec<ast::Node>) -> Result<ast::Node, String>,
}

lazy_static! {
    pub static ref PROD_TABLE: Vec<ProdTabEntry> = {
		let mut m: Vec<ProdTabEntry> = Vec::with_capacity(0);
		
        m.push(ProdTabEntry{
			string: "G0 : Lines ;".to_string(),
			id: "G0".to_string(),
			nt_type: 0,
			index: 0,
			num_symbols: 1,
			reduce_func: ast::g_0_0,
				// |x: Vec<ast::Node>| -> Result<ast::Node, String> {
				// 	ast::g_0_0(x[0])
				// },
		});
		
        m.push(ProdTabEntry{
			string: "Lines : Line ;".to_string(),
			id: "Lines".to_string(),
			nt_type: 1,
			index: 1,
			num_symbols: 1,
			reduce_func: ast::lines_0,
				// |x: Vec<ast::Node>| -> Result<ast::Node, String> {
				// 	ast::lines_0(x[0])
				// },
		});
		
        m.push(ProdTabEntry{
			string: "Lines : Lines Line ;".to_string(),
			id: "Lines".to_string(),
			nt_type: 1,
			index: 2,
			num_symbols: 2,
			reduce_func: ast::lines_1,
				// |x: Vec<ast::Node>| -> Result<ast::Node, String> {
				// 	ast::lines_1(x[0],x[1])
				// },
		});
		
        m.push(ProdTabEntry{
			string: "Line : sap ip name name timestamp string number1 number1 string string ;".to_string(),
			id: "Line".to_string(),
			nt_type: 0,
			index: 3,
			num_symbols: 10,
			reduce_func: ast::line_0,
				// |x: Vec<ast::Node>| -> Result<ast::Node, String> {
				// 	ast::line_0(x[0],x[1],x[2],x[3],x[4],x[5],x[6],x[7],x[8],x[9])
				// },
		});
		
        m
    };
}
