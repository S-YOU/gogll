//! Generated by GoGLL. Do not edit.

use crate::token;

use std::collections::HashMap;
use lazy_static::lazy_static;

use super::productions_table::PROD_TABLE;

#[derive(PartialEq, Eq)]
pub enum Action {
	Accept,
	Shift(usize),
	Reduce(usize),
}

impl std::fmt::Display for Action {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		match self {
			Action::Accept => write!(f, "Accept(0)"),
			Action::Reduce(s) => write!(f, "Reduce({}) {}", s, PROD_TABLE[*s].string),
			Action::Shift(s) => write!(f, "Shift({})", s),
		}
    }
}

#[derive(std::default::Default)]
pub struct ActionRow {
	pub can_recover: bool,
	pub actions: HashMap<token::Type,  Action>,
}

lazy_static! {
	pub static ref ACTION_TABLE: Vec<ActionRow> = {
		let mut v: Vec<ActionRow> = Vec::with_capacity(14);
        v.resize_with(14, Default::default);
		
		v[0].can_recover = false;
		v[0].actions.insert(token::Type::T_3, Action::Shift(3),		/* sap */); 
		v[1].can_recover = false;
		v[1].actions.insert(token::Type::EOF, Action::Reduce(1),		/* $, Reduce: Lines */); 
		v[1].actions.insert(token::Type::T_3, Action::Reduce(1),		/* sap, Reduce: Lines */); 
		v[2].can_recover = false;
		v[2].actions.insert(token::Type::EOF, Action::Accept,		/* $ */); 
		v[2].actions.insert(token::Type::T_3, Action::Shift(3),		/* sap */); 
		v[3].can_recover = false;
		v[3].actions.insert(token::Type::T_0, Action::Shift(5),		/* ip */); 
		v[4].can_recover = false;
		v[4].actions.insert(token::Type::EOF, Action::Reduce(2),		/* $, Reduce: Lines */); 
		v[4].actions.insert(token::Type::T_3, Action::Reduce(2),		/* sap, Reduce: Lines */); 
		v[5].can_recover = false;
		v[5].actions.insert(token::Type::T_1, Action::Shift(6),		/* name */); 
		v[6].can_recover = false;
		v[6].actions.insert(token::Type::T_1, Action::Shift(7),		/* name */); 
		v[7].can_recover = false;
		v[7].actions.insert(token::Type::T_5, Action::Shift(8),		/* timestamp */); 
		v[8].can_recover = false;
		v[8].actions.insert(token::Type::T_4, Action::Shift(9),		/* string */); 
		v[9].can_recover = false;
		v[9].actions.insert(token::Type::T_2, Action::Shift(10),		/* number1 */); 
		v[10].can_recover = false;
		v[10].actions.insert(token::Type::T_2, Action::Shift(11),		/* number1 */); 
		v[11].can_recover = false;
		v[11].actions.insert(token::Type::T_4, Action::Shift(12),		/* string */); 
		v[12].can_recover = false;
		v[12].actions.insert(token::Type::T_4, Action::Shift(13),		/* string */); 
		v[13].can_recover = false;
		v[13].actions.insert(token::Type::EOF, Action::Reduce(3),		/* $, Reduce: Line */); 
		v[13].actions.insert(token::Type::T_3, Action::Reduce(3),		/* sap, Reduce: Line */); 

		v
	};
}
