// Package parser is generated by gogll. Do not edit.
package parser

import (
	"bytes"
	"fmt"
	"os"
	"sort"
	"strings"

	"github.com/goccmack/gogll/examples/boolx/lexer"
	"github.com/goccmack/gogll/examples/boolx/parser/bsr"
	"github.com/goccmack/gogll/examples/boolx/parser/slot"
	"github.com/goccmack/gogll/examples/boolx/parser/symbols"
	"github.com/goccmack/gogll/examples/boolx/token"
)

var (
	cI = 0

	R *descriptors
	U *descriptors

	popped   map[poppedNode]bool
	crf      map[clusterNode][]*crfNode
	crfNodes map[crfNode]*crfNode

	lex         *lexer.Lexer
	parseErrors []*Error
)

func initParser(l *lexer.Lexer) {
	lex = l
	cI = 0
	R, U = &descriptors{}, &descriptors{}
	popped = make(map[poppedNode]bool)
	crf = map[clusterNode][]*crfNode{
		{symbols.NT_Expr, 0}: {},
	}
	crfNodes = map[crfNode]*crfNode{}
	bsr.Init(symbols.NT_Expr, lex)
	parseErrors = nil
}

func Parse(l *lexer.Lexer) (error, []*Error) {
	initParser(l)
	var L slot.Label
	m, cU := len(l.Tokens)-1, 0
	ntAdd(symbols.NT_Expr, 0)
	// DumpDescriptors()
	for !R.empty() {
		L, cU, cI = R.remove()

		// fmt.Println()
		// fmt.Printf("L:%s, cI:%d, I[cI]:%s, cU:%d\n", L, cI, lex.Tokens[cI], cU)
		// DumpDescriptors()

		switch L {
		case slot.Expr0R0: // Expr : ∙var

			bsr.Add(slot.Expr0R1, cU, cI, cI+1)
			cI++
			if follow(symbols.NT_Expr) {
				rtn(symbols.NT_Expr, cU, cI)
			} else {
				parseError(slot.Expr0R0, cI, followSets[symbols.NT_Expr])
			}
		case slot.Expr1R0: // Expr : ∙Expr Op Expr

			call(slot.Expr1R1, cU, cI)
		case slot.Expr1R1: // Expr : Expr ∙Op Expr

			if !testSelect(slot.Expr1R1) {
				parseError(slot.Expr1R1, cI, first[slot.Expr1R1])
				break
			}

			call(slot.Expr1R2, cU, cI)
		case slot.Expr1R2: // Expr : Expr Op ∙Expr

			if !testSelect(slot.Expr1R2) {
				parseError(slot.Expr1R2, cI, first[slot.Expr1R2])
				break
			}

			call(slot.Expr1R3, cU, cI)
		case slot.Expr1R3: // Expr : Expr Op Expr ∙

			if follow(symbols.NT_Expr) {
				rtn(symbols.NT_Expr, cU, cI)
			} else {
				parseError(slot.Expr1R0, cI, followSets[symbols.NT_Expr])
			}
		case slot.Op0R0: // Op : ∙&

			bsr.Add(slot.Op0R1, cU, cI, cI+1)
			cI++
			if follow(symbols.NT_Op) {
				rtn(symbols.NT_Op, cU, cI)
			} else {
				parseError(slot.Op0R0, cI, followSets[symbols.NT_Op])
			}
		case slot.Op1R0: // Op : ∙|

			bsr.Add(slot.Op1R1, cU, cI, cI+1)
			cI++
			if follow(symbols.NT_Op) {
				rtn(symbols.NT_Op, cU, cI)
			} else {
				parseError(slot.Op1R0, cI, followSets[symbols.NT_Op])
			}

		default:
			panic("This must not happen")
		}
	}
	if !bsr.Contain(symbols.NT_Expr, 0, m) {
		sortParseErrors()
		err := fmt.Errorf("Error: Parse Failed right extent=%d, m=%d",
			bsr.GetRightExtent(), len(l.Tokens))
		return err, parseErrors
	}
	return nil, nil
}

func ntAdd(nt symbols.NT, j int) {
	// fmt.Printf("ntAdd(%s, %d)\n", nt, j)
	failed := true
	expected := map[token.Type]string{}
	for _, l := range slot.GetAlternates(nt) {
		if testSelect(l) {
			dscAdd(l, j, j)
			failed = false
		} else {
			for k, v := range first[l] {
				expected[k] = v
			}
		}
	}
	if failed {
		for _, l := range slot.GetAlternates(nt) {
			parseError(l, j, expected)
		}
	}
}

/*** Call Return Forest ***/

type poppedNode struct {
	X    symbols.NT
	k, j int
}

type clusterNode struct {
	X symbols.NT
	k int
}

type crfNode struct {
	L slot.Label
	i int
}

/*
suppose that L is Y ::=αX ·β
if there is no CRF node labelled (L,i)
	create one let u be the CRF node labelled (L,i)
if there is no CRF node labelled (X, j) {
	create a CRF node v labelled (X, j)
	create an edge from v to u
	ntAdd(X, j)
} else {
	let v be the CRF node labelled (X, j)
	if there is not an edge from v to u {
		create an edge from v to u
		for all ((X, j,h)∈P) {
			dscAdd(L, i, h);
			bsrAdd(L, i, j, h)
		}
	}
}
*/
func call(L slot.Label, i, j int) {
	// fmt.Printf("call(%s,%d,%d)\n", L,i,j)
	u, exist := crfNodes[crfNode{L, i}]
	// fmt.Printf("  u exist=%t\n", exist)
	if !exist {
		u = &crfNode{L, i}
		crfNodes[*u] = u
	}
	X := L.Symbols()[L.Pos()-1].(symbols.NT)
	ndV := clusterNode{X, j}
	v, exist := crf[ndV]
	if !exist {
		// fmt.Println("  v !exist")
		crf[ndV] = []*crfNode{u}
		ntAdd(X, j)
	} else {
		// fmt.Println("  v exist")
		if !existEdge(v, u) {
			// fmt.Printf("  !existEdge(%v)\n", u)
			crf[ndV] = append(v, u)
			// fmt.Printf("|popped|=%d\n", len(popped))
			for pnd, _ := range popped {
				if pnd.X == X && pnd.k == j {
					dscAdd(L, i, pnd.j)
					bsr.Add(L, i, j, pnd.j)
				}
			}
		}
	}
}

func existEdge(nds []*crfNode, nd *crfNode) bool {
	for _, nd1 := range nds {
		if nd1 == nd {
			return true
		}
	}
	return false
}

func rtn(X symbols.NT, k, j int) {
	// fmt.Printf("rtn(%s,%d,%d)\n", X,k,j)
	p := poppedNode{X, k, j}
	if _, exist := popped[p]; !exist {
		popped[p] = true
		for _, nd := range crf[clusterNode{X, k}] {
			dscAdd(nd.L, nd.i, j)
			bsr.Add(nd.L, nd.i, k, j)
		}
	}
}

func CRFString() string {
	buf := new(bytes.Buffer)
	buf.WriteString("CRF: {")
	for cn, nds := range crf {
		for _, nd := range nds {
			fmt.Fprintf(buf, "%s->%s, ", cn, nd)
		}
	}
	buf.WriteString("}")
	return buf.String()
}

func (cn clusterNode) String() string {
	return fmt.Sprintf("(%s,%d)", cn.X, cn.k)
}

func (n crfNode) String() string {
	return fmt.Sprintf("(%s,%d)", n.L.String(), n.i)
}

func PoppedString() string {
	buf := new(bytes.Buffer)
	buf.WriteString("Popped: {")
	for p, _ := range popped {
		fmt.Fprintf(buf, "(%s,%d,%d) ", p.X, p.k, p.j)
	}
	buf.WriteString("}")
	return buf.String()
}

/*** descriptors ***/

type descriptors struct {
	set []*descriptor
}

func (ds *descriptors) contain(d *descriptor) bool {
	for _, d1 := range ds.set {
		if d1 == d {
			return true
		}
	}
	return false
}

func (ds *descriptors) empty() bool {
	return len(ds.set) == 0
}

func (ds *descriptors) String() string {
	buf := new(bytes.Buffer)
	buf.WriteString("{")
	for i, d := range ds.set {
		if i > 0 {
			buf.WriteString("; ")
		}
		fmt.Fprintf(buf, "%s", d)
	}
	buf.WriteString("}")
	return buf.String()
}

type descriptor struct {
	L slot.Label
	k int
	i int
}

func (d *descriptor) String() string {
	return fmt.Sprintf("%s,%d,%d", d.L, d.k, d.i)
}

func dscAdd(L slot.Label, k, i int) {
	// fmt.Printf("dscAdd(%s,%d,%d)\n", L, k, i)
	d := &descriptor{L, k, i}
	if !U.contain(d) {
		R.set = append(R.set, d)
		U.set = append(U.set, d)
	}
}

func (ds *descriptors) remove() (L slot.Label, k, i int) {
	d := ds.set[len(ds.set)-1]
	ds.set = ds.set[:len(ds.set)-1]
	// fmt.Printf("remove: %s,%d,%d\n", d.L, d.k, d.i)
	return d.L, d.k, d.i
}

func DumpDescriptors() {
	DumpR()
	DumpU()
}

func DumpR() {
	fmt.Println("R:")
	for _, d := range R.set {
		fmt.Printf(" %s\n", d)
	}
}

func DumpU() {
	fmt.Println("U:")
	for _, d := range U.set {
		fmt.Printf(" %s\n", d)
	}
}

/*** TestSelect ***/

func follow(nt symbols.NT) bool {
	_, exist := followSets[nt][lex.Tokens[cI].Type()]
	return exist
}

func testSelect(l slot.Label) bool {
	_, exist := first[l][lex.Tokens[cI].Type()]
	// fmt.Printf("testSelect(%s) = %t\n", l, exist)
	return exist
}

var first = []map[token.Type]string{
	// Expr : ∙var
	map[token.Type]string{
		token.Type1: "var",
	},
	// Expr : var ∙
	map[token.Type]string{
		token.Type0: "&",
		token.EOF:   "EOF",
		token.Type2: "|",
	},
	// Expr : ∙Expr Op Expr
	map[token.Type]string{
		token.Type1: "var",
	},
	// Expr : Expr ∙Op Expr
	map[token.Type]string{
		token.Type0: "&",
		token.Type2: "|",
	},
	// Expr : Expr Op ∙Expr
	map[token.Type]string{
		token.Type1: "var",
	},
	// Expr : Expr Op Expr ∙
	map[token.Type]string{
		token.Type0: "&",
		token.EOF:   "EOF",
		token.Type2: "|",
	},
	// Op : ∙&
	map[token.Type]string{
		token.Type0: "&",
	},
	// Op : & ∙
	map[token.Type]string{
		token.Type1: "var",
	},
	// Op : ∙|
	map[token.Type]string{
		token.Type2: "|",
	},
	// Op : | ∙
	map[token.Type]string{
		token.Type1: "var",
	},
}

var followSets = []map[token.Type]string{
	// Expr
	map[token.Type]string{
		token.Type0: "&",
		token.EOF:   "EOF",
		token.Type2: "|",
	},
	// Op
	map[token.Type]string{
		token.Type1: "var",
	},
}

/*** Errors ***/

type Error struct {
	cI           int
	Slot         slot.Label
	Token        *token.Token
	Line, Column int
	Expected     map[token.Type]string
}

func (pe *Error) String() string {
	w := new(bytes.Buffer)
	fmt.Fprintf(w, "Parse Error: %s I[%d]=%s at line %d col %d\n",
		pe.Slot, pe.cI, pe.Token, pe.Line, pe.Column)
	exp := []string{}
	for _, e := range pe.Expected {
		exp = append(exp, e)
	}
	fmt.Fprintf(w, "Expected one of: [%s]", strings.Join(exp, ","))
	return w.String()
}

func parseError(slot slot.Label, i int, expected map[token.Type]string) {
	pe := &Error{cI: i, Slot: slot, Token: lex.Tokens[i], Expected: expected}
	parseErrors = append(parseErrors, pe)
}

func sortParseErrors() {
	sort.Slice(parseErrors,
		func(i, j int) bool {
			return parseErrors[j].Token.Lext() < parseErrors[i].Token.Lext()
		})
	for _, pe := range parseErrors {
		pe.Line, pe.Column = lex.GetLineColumn(pe.Token.Lext())
	}
}

func parseErrorError(err error) {
	fmt.Printf("Error: %s\n", err)
	os.Exit(1)
}
