
//! Module lexer is generated by GoGLL. Do not edit.

extern crate lazy_static;

use crate::token;

use std::{fs, io};
use std::rc::Rc;
use lazy_static::lazy_static;

type State = usize;

const NULL_STATE: State = usize::MAX ;

/**
Lexer contains both the input Vec<char> and the Vec<token::Token>
parsed from the input
*/
pub struct Lexer {
	/// i is the input vector of char
	i: Rc<Vec<char>>,

	/// tokens is the vector of tokens constructed by the lexer from I
	pub tokens: Vec<Rc<token::Token>>
}

impl Lexer {
	/**
	new_file constructs a Lexer created from the input file, fname. 

	If the input file is a markdown file new_file process treats all text outside
	code blocks as whitespace. All text inside code blocks are treated as input text.

	If the input file is a normal text file new_file treats all text in the inputfile
	as input text.
	*/
	#[allow(dead_code)]
	pub fn new_file(fname: &String) -> io::Result<Rc<Lexer>> {
		let i = Rc::new(load_file(fname)?);
		Ok(Lexer::new(i))
	}

	/**
	new constructs a Lexer from a Vec<char>. 
	
	All contents of the input are treated as input text.
	*/
	pub fn new(input: Rc<Vec<char>>) -> Rc<Lexer> {
		let mut lex = Lexer{
			i:      input.clone(),
			tokens: Vec::new(),
		};
		let mut lext = 0;
		while lext < lex.i.len() {
			while lext < lex.i.len() && lex.i[lext].is_whitespace() {
				lext += 1
			}
			if lext < lex.i.len() {
				let tok = lex.scan(lext);
				lext = tok.rext;
				lex.add_token(tok)
			}
		}
		lex.add(token::Type::EOF, input.len(), input.len());
		Rc::new(lex)
	}

	fn add(&mut self, t: token::Type, lext: usize, rext: usize) {
		self.add_token(token::new(t, lext, rext, &self.i))
	}
	
	fn add_token(&mut self, tok: Rc<token::Token>) {
		self.tokens.push(tok)
	}
	
	fn scan(&mut self, i: usize) -> Rc<token::Token> {
		let mut s: State = 0;
		let mut typ = token::Type::Error;
		let mut rext = i;

		while s != NULL_STATE {
			if rext >= self.i.len() {
				typ = ACCEPT[s];
				s = NULL_STATE
			} else {
				typ = ACCEPT[s];
				s = NEXT_STATE[s](self.i[rext]);
				if s != NULL_STATE || typ == token::Type::Error {
					rext += 1
				}
			}
		}
		return token::new(typ, i, rext, &self.i)
	}

	/// get_line_column returns the (line, column) of char[i] in the input
	#[allow(dead_code)]
	pub fn get_line_column(&self, i: usize) -> (usize, usize) {
		let mut line = 1;
		let mut col = 1;
		let mut j = 0;
		while j < i {
			match self.i[j] {
			'\n' => {
				line += 1;
				col = 1
			},
			'\t' => col += 4,
			_ => col += 1
			}
			j += 1
		}
		(line, col)
	}
	
	/// get_line_column_of_token returns the (line, column) of token[i] 
	/// in the input
	#[allow(dead_code)]
	pub fn get_line_column_of_token(&self, i: usize) -> (usize, usize) {
		self.get_line_column(self.tokens[i].lext)
	}

	// get_string returns the input string from the left extent of Token[lext] to
	// the right extent of Token[rext]
	#[allow(dead_code)]
	pub fn get_string(&self, lext: usize, rext: usize) -> String {
		let lext = self.tokens[lext].lext;
		let rext = self.tokens[rext].rext;
		self.i[lext..rext].iter().collect::<String>()
	}
	
	}
/*** End of Lexer implementation ***/


fn load_file(fname: &String) -> io::Result<Vec<char>> {
	let input = fs::read_to_string(fname)?;
	let input: Vec<char> = input.chars().collect();
	if fname.ends_with(".md") {
		load_md(input)
	} else {
		Ok(input)
	}
}

fn load_md(input: Vec<char>) -> io::Result<Vec<char>> {
    let mut i = 0;
    let mut output: Vec<char> = Vec::new();
    let mut text = true;
    while i < input.len() {
        if i < input.len() - 3
            && input[i..i + 3].into_iter().collect::<String>() == String::from("```")
        {
            text = !text;
            output.append(&mut "   ".chars().collect());
            i += 3;
        }
        if i < input.len() {
            if text {
                match input[i] {
                    '\n' => output.push('\n'),
                    _ => output.push(' '),
                }
            } else {
                output.push(input[i]);
            }
            i += 1;
        }
    }
	Ok(output)
}

#[allow(dead_code)]
fn any(r: char, set: &Vec<char>) -> bool {
	for r1 in set.iter() {
		if &r == r1 {
			return true
		}
	}
	return false
}

#[allow(dead_code)]
fn not(r: char, set: &Vec<char>) -> bool {
	for r1 in set.iter() {
		if &r == r1 {
			return false
		}
	}
	return true
}

lazy_static! {
	static ref ACCEPT: Vec<token::Type> = vec![ 
		token::Type::Error, 
		token::Type::Error, 
		token::Type::Error, 
		token::Type::Type0, 
		token::Type::Type1, 
		token::Type::Type2, 
		token::Type::Type3, 
		token::Type::Type4, 
		token::Type::Type5, 
		token::Type::Type6, 
		token::Type::Type7, 
		token::Type::Type8, 
		token::Type::Error, 
		token::Type::Error, 
		token::Type::Error, 
		token::Type::Error, 
		token::Type::Error, 
		token::Type::Error, 
		token::Type::Type21, 
		token::Type::Type22, 
		token::Type::Type23, 
		token::Type::Error, 
		token::Type::Error, 
		token::Type::Type18, 
		token::Type::Error, 
		token::Type::Error, 
		token::Type::Error, 
		token::Type::Type19, 
		token::Type::Type19, 
		token::Type::Type19, 
		token::Type::Type19, 
		token::Type::Type19, 
		token::Type::Type19, 
		token::Type::Type19, 
		token::Type::Type19, 
		token::Type::Type19, 
		token::Type::Type15, 
		token::Type::Type10, 
		token::Type::Type9, 
		token::Type::Type19, 
		token::Type::Type19, 
		token::Type::Type19, 
		token::Type::Type14, 
		token::Type::Type19, 
		token::Type::Type19, 
		token::Type::Type19, 
		token::Type::Type19, 
		token::Type::Type19, 
		token::Type::Type19, 
		token::Type::Type19, 
		token::Type::Type19, 
		token::Type::Type19, 
		token::Type::Type11, 
		token::Type::Type19, 
		token::Type::Type19, 
		token::Type::Type19, 
		token::Type::Type19, 
		token::Type::Type19, 
		token::Type::Type12, 
		token::Type::Type19, 
		token::Type::Type16, 
		token::Type::Type19, 
		token::Type::Type20, 
		token::Type::Type13, 
		token::Type::Type17, 
	];
}

lazy_static! {
	static ref NEXT_STATE: Vec<fn(char) -> State> = vec![  
	// Set0 
	|c| -> State { 
		match true { 
			_ if c == '"' => return 1, 
			_ if c == '\'' => return 2, 
			_ if c == '(' => return 3, 
			_ if c == ')' => return 4, 
			_ if c == '.' => return 5, 
			_ if c == ':' => return 6, 
			_ if c == ';' => return 7, 
			_ if c == '<' => return 8, 
			_ if c == '>' => return 9, 
			_ if c == '[' => return 10, 
			_ if c == ']' => return 11, 
			_ if c == 'a' => return 12, 
			_ if c == 'e' => return 13, 
			_ if c == 'l' => return 14, 
			_ if c == 'n' => return 15, 
			_ if c == 'p' => return 16, 
			_ if c == 'u' => return 17, 
			_ if c == '{' => return 18, 
			_ if c == '|' => return 19, 
			_ if c == '}' => return 20, 
			_ if c.is_uppercase() => return 21, 
			_ if c.is_lowercase() => return 22, 
			_ => NULL_STATE
		}
	}, 
	// Set1 
	|c| -> State { 
		match true { 
			_ if c == '"' => return 23, 
			_ if c == '\\' => return 24, 
			_ if not(c, &vec!['"','\\']) => return 1, 
			_ => NULL_STATE
		}
	}, 
	// Set2 
	|c| -> State { 
		match true { 
			_ if c == '\\' => return 25, 
			_ if not(c, &vec!['\'','\\']) => return 26, 
			_ => NULL_STATE
		}
	}, 
	// Set3 
	|_| -> State { 
		match true { 
			_ => NULL_STATE
		}
	}, 
	// Set4 
	|_| -> State { 
		match true { 
			_ => NULL_STATE
		}
	}, 
	// Set5 
	|_| -> State { 
		match true { 
			_ => NULL_STATE
		}
	}, 
	// Set6 
	|_| -> State { 
		match true { 
			_ => NULL_STATE
		}
	}, 
	// Set7 
	|_| -> State { 
		match true { 
			_ => NULL_STATE
		}
	}, 
	// Set8 
	|_| -> State { 
		match true { 
			_ => NULL_STATE
		}
	}, 
	// Set9 
	|_| -> State { 
		match true { 
			_ => NULL_STATE
		}
	}, 
	// Set10 
	|_| -> State { 
		match true { 
			_ => NULL_STATE
		}
	}, 
	// Set11 
	|_| -> State { 
		match true { 
			_ => NULL_STATE
		}
	}, 
	// Set12 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c == 'n' => return 28, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set13 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c == 'm' => return 29, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set14 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c == 'e' => return 30, 
			_ if c == 'o' => return 31, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set15 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c == 'o' => return 32, 
			_ if c == 'u' => return 33, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set16 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c == 'a' => return 34, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set17 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c == 'p' => return 35, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set18 
	|_| -> State { 
		match true { 
			_ => NULL_STATE
		}
	}, 
	// Set19 
	|_| -> State { 
		match true { 
			_ => NULL_STATE
		}
	}, 
	// Set20 
	|_| -> State { 
		match true { 
			_ => NULL_STATE
		}
	}, 
	// Set21 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 36, 
			_ if c.is_alphabetic() => return 36, 
			_ if c.is_numeric() => return 36, 
			_ => NULL_STATE
		}
	}, 
	// Set22 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set23 
	|_| -> State { 
		match true { 
			_ => NULL_STATE
		}
	}, 
	// Set24 
	|c| -> State { 
		match true { 
			_ if any(c, &vec!['"','\\','n','r','t']) => return 1, 
			_ => NULL_STATE
		}
	}, 
	// Set25 
	|c| -> State { 
		match true { 
			_ if any(c, &vec!['\'','\\','n','r','t']) => return 26, 
			_ => NULL_STATE
		}
	}, 
	// Set26 
	|c| -> State { 
		match true { 
			_ if c == '\'' => return 37, 
			_ => NULL_STATE
		}
	}, 
	// Set27 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set28 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c == 'y' => return 38, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set29 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c == 'p' => return 39, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set30 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c == 't' => return 40, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set31 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c == 'w' => return 41, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set32 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c == 't' => return 42, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set33 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c == 'm' => return 43, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set34 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c == 'c' => return 44, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set35 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c == 'c' => return 45, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set36 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 36, 
			_ if c.is_alphabetic() => return 36, 
			_ if c.is_numeric() => return 36, 
			_ => NULL_STATE
		}
	}, 
	// Set37 
	|_| -> State { 
		match true { 
			_ => NULL_STATE
		}
	}, 
	// Set38 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set39 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c == 't' => return 46, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set40 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c == 't' => return 47, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set41 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c == 'c' => return 48, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set42 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set43 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c == 'b' => return 49, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set44 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c == 'k' => return 50, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set45 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c == 'a' => return 51, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set46 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c == 'y' => return 52, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set47 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c == 'e' => return 53, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set48 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c == 'a' => return 54, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set49 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c == 'e' => return 55, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set50 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c == 'a' => return 56, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set51 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c == 's' => return 57, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set52 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set53 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c == 'r' => return 58, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set54 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c == 's' => return 59, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set55 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c == 'r' => return 60, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set56 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c == 'g' => return 61, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set57 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c == 'e' => return 62, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set58 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set59 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c == 'e' => return 63, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set60 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set61 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c == 'e' => return 64, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set62 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set63 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	// Set64 
	|c| -> State { 
		match true { 
			_ if c == '_' => return 27, 
			_ if c.is_alphabetic() => return 27, 
			_ if c.is_numeric() => return 27, 
			_ => NULL_STATE
		}
	}, 
	];
}
