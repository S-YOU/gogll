//! Module slot is generated by gogll. Do not edit. 

extern crate lazy_static;

use lazy_static::lazy_static;

use super::symbols::{Symbol, NT, T};
use std::collections::HashMap;
use std::fmt;

#[derive(Hash, Eq, PartialEq, Clone, Copy, Debug)]
pub enum Label { 
    GoGLL0R0,
    GoGLL0R1,
    GoGLL0R2,
    LexAlternates0R0,
    LexAlternates0R1,
    LexAlternates1R0,
    LexAlternates1R1,
    LexAlternates1R2,
    LexAlternates1R3,
    LexBracket0R0,
    LexBracket0R1,
    LexBracket1R0,
    LexBracket1R1,
    LexBracket2R0,
    LexBracket2R1,
    LexBracket3R0,
    LexBracket3R1,
    LexGroup0R0,
    LexGroup0R1,
    LexGroup0R2,
    LexGroup0R3,
    LexOneOrMore0R0,
    LexOneOrMore0R1,
    LexOneOrMore0R2,
    LexOneOrMore0R3,
    LexOptional0R0,
    LexOptional0R1,
    LexOptional0R2,
    LexOptional0R3,
    LexRule0R0,
    LexRule0R1,
    LexRule0R2,
    LexRule0R3,
    LexRule0R4,
    LexSymbol0R0,
    LexSymbol0R1,
    LexSymbol1R0,
    LexSymbol1R1,
    LexSymbol1R2,
    LexSymbol2R0,
    LexSymbol2R1,
    LexSymbol3R0,
    LexSymbol3R1,
    LexSymbol4R0,
    LexSymbol4R1,
    LexSymbol4R2,
    LexSymbol5R0,
    LexSymbol5R1,
    LexZeroOrMore0R0,
    LexZeroOrMore0R1,
    LexZeroOrMore0R2,
    LexZeroOrMore0R3,
    Package0R0,
    Package0R1,
    Package0R2,
    RegExp0R0,
    RegExp0R1,
    RegExp1R0,
    RegExp1R1,
    RegExp1R2,
    Rule0R0,
    Rule0R1,
    Rule1R0,
    Rule1R1,
    Rules0R0,
    Rules0R1,
    Rules1R0,
    Rules1R1,
    Rules1R2,
    SyntaxAlternate0R0,
    SyntaxAlternate0R1,
    SyntaxAlternate1R0,
    SyntaxAlternate1R1,
    SyntaxAlternates0R0,
    SyntaxAlternates0R1,
    SyntaxAlternates1R0,
    SyntaxAlternates1R1,
    SyntaxAlternates1R2,
    SyntaxAlternates1R3,
    SyntaxRule0R0,
    SyntaxRule0R1,
    SyntaxRule0R2,
    SyntaxRule0R3,
    SyntaxRule0R4,
    SyntaxSymbol0R0,
    SyntaxSymbol0R1,
    SyntaxSymbol1R0,
    SyntaxSymbol1R1,
    SyntaxSymbol2R0,
    SyntaxSymbol2R1,
    SyntaxSymbols0R0,
    SyntaxSymbols0R1,
    SyntaxSymbols1R0,
    SyntaxSymbols1R1,
    SyntaxSymbols1R2,
    UnicodeClass0R0,
    UnicodeClass0R1,
    UnicodeClass1R0,
    UnicodeClass1R1,
    UnicodeClass2R0,
    UnicodeClass2R1,
    UnicodeClass3R0,
    UnicodeClass3R1,
}

#[allow(dead_code)]
pub struct Slot {
    nt:      NT,
    alt:     usize,
    pos:     usize,
    symbols: Vec<Symbol>,
    label: 	 Label,
}

#[derive(Hash, Eq, PartialEq)]
pub struct Index {
    pub nt:      NT,
    pub alt:     usize,
    pub pos:     usize,
}

#[allow(dead_code)]
pub fn get_alternates(nt: &NT) -> &'static Vec<Label> {
    if let Some(alts) = ALTERNATES.get(nt) {
        return alts
    }
    panic!("{} has no alternates", nt)
}

#[allow(dead_code)]
pub fn get_label(nt: &NT, alt: usize, pos: usize) -> Label {
    if let Some(l) = LABELS.get(&Index{nt: nt.clone(), alt: alt, pos: pos}) {
        return l.clone()
    }
    panic!("No label for {} alt {} pos {}", nt, alt, pos)
}

impl <'a>Label {
    #[allow(dead_code)]
    pub fn eor(&self) -> bool {
        self.slot().eor()
    }
    
    #[allow(dead_code)]
    pub fn head(&self) -> &'static NT {
        &self.slot().nt
    }
    
    pub fn index(&self) -> Index {
        let s = self.slot();
        Index{nt: s.nt, alt: s.alt, pos: s.pos}
    }
    
    #[allow(dead_code)]
    pub fn alternate(&self) -> usize {
        self.slot().alt
    }
    
    #[allow(dead_code)]
    pub fn pos(&self) -> usize {
        self.slot().pos
    }
    
    #[allow(dead_code)]
    pub fn slot(&self) -> &'static Slot {
        if let Some(s) = SLOTS.get(self) {
            return s
        }
        panic!("Invalid slot label {}", self)
    }

    #[allow(dead_code)]
    pub fn symbols(&self) -> &'a Vec<Symbol> {
        &self.slot().symbols
    }
}
/*** end of impl Label***/

impl fmt::Display for Label {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let slt = self.slot();
        let mut s = format!("{} :", slt.nt);
        for (i, sym) in slt.symbols.iter().enumerate() {
            if i == slt.pos {
                s.push_str("•")
            }
            s.push_str(&format!("{} ", sym));
        }
        write!(f, "{}", s)
    }
}

impl Slot {
    #[allow(dead_code)]
    pub fn eor(&self) -> bool {
        self.pos >= self.symbols.len()
    }    
} /*** impl Slot ***/


impl fmt::Display for Slot {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let mut s = format!("{} : ", self.nt);
        for (i, sym) in self.symbols.iter().enumerate() {
            if i == self.pos {
                s.push_str("•")
            }
            s.push_str(&format!("{} ", sym));
        }
        if self.pos >= self.symbols.len() {
            s.push_str("•")
        }
        write!(f, "{}", s)
    }
}

lazy_static! {
    static ref ALTERNATES: HashMap<NT, Vec<Label>> = {
        let mut m = HashMap::new(); 
        m.insert(NT::GoGLL, 
            vec![ 
                Label::GoGLL0R0,
            ]);
        m.insert(NT::Package, 
            vec![ 
                Label::Package0R0,
            ]);
        m.insert(NT::Rules, 
            vec![ 
                Label::Rules0R0,
                Label::Rules1R0,
            ]);
        m.insert(NT::Rule, 
            vec![ 
                Label::Rule0R0,
                Label::Rule1R0,
            ]);
        m.insert(NT::LexSymbol, 
            vec![ 
                Label::LexSymbol0R0,
                Label::LexSymbol1R0,
                Label::LexSymbol2R0,
                Label::LexSymbol3R0,
                Label::LexSymbol4R0,
                Label::LexSymbol5R0,
            ]);
        m.insert(NT::UnicodeClass, 
            vec![ 
                Label::UnicodeClass0R0,
                Label::UnicodeClass1R0,
                Label::UnicodeClass2R0,
                Label::UnicodeClass3R0,
            ]);
        m.insert(NT::LexBracket, 
            vec![ 
                Label::LexBracket0R0,
                Label::LexBracket1R0,
                Label::LexBracket2R0,
                Label::LexBracket3R0,
            ]);
        m.insert(NT::LexGroup, 
            vec![ 
                Label::LexGroup0R0,
            ]);
        m.insert(NT::LexOptional, 
            vec![ 
                Label::LexOptional0R0,
            ]);
        m.insert(NT::LexZeroOrMore, 
            vec![ 
                Label::LexZeroOrMore0R0,
            ]);
        m.insert(NT::LexOneOrMore, 
            vec![ 
                Label::LexOneOrMore0R0,
            ]);
        m.insert(NT::LexAlternates, 
            vec![ 
                Label::LexAlternates0R0,
                Label::LexAlternates1R0,
            ]);
        m.insert(NT::RegExp, 
            vec![ 
                Label::RegExp0R0,
                Label::RegExp1R0,
            ]);
        m.insert(NT::LexRule, 
            vec![ 
                Label::LexRule0R0,
            ]);
        m.insert(NT::SyntaxRule, 
            vec![ 
                Label::SyntaxRule0R0,
            ]);
        m.insert(NT::SyntaxAlternates, 
            vec![ 
                Label::SyntaxAlternates0R0,
                Label::SyntaxAlternates1R0,
            ]);
        m.insert(NT::SyntaxAlternate, 
            vec![ 
                Label::SyntaxAlternate0R0,
                Label::SyntaxAlternate1R0,
            ]);
        m.insert(NT::SyntaxSymbols, 
            vec![ 
                Label::SyntaxSymbols0R0,
                Label::SyntaxSymbols1R0,
            ]);
        m.insert(NT::SyntaxSymbol, 
            vec![ 
                Label::SyntaxSymbol0R0,
                Label::SyntaxSymbol1R0,
                Label::SyntaxSymbol2R0,
            ]);
        m
     };

    static ref LABELS: HashMap<Index, Label> = { 
        let mut m = HashMap::new(); 
        m.insert(Index{nt:NT::GoGLL, alt:0, pos:0}, Label::GoGLL0R0); 
        m.insert(Index{nt:NT::GoGLL, alt:0, pos:1}, Label::GoGLL0R1); 
        m.insert(Index{nt:NT::GoGLL, alt:0, pos:2}, Label::GoGLL0R2); 
        m.insert(Index{nt:NT::LexAlternates, alt:0, pos:0}, Label::LexAlternates0R0); 
        m.insert(Index{nt:NT::LexAlternates, alt:0, pos:1}, Label::LexAlternates0R1); 
        m.insert(Index{nt:NT::LexAlternates, alt:1, pos:0}, Label::LexAlternates1R0); 
        m.insert(Index{nt:NT::LexAlternates, alt:1, pos:1}, Label::LexAlternates1R1); 
        m.insert(Index{nt:NT::LexAlternates, alt:1, pos:2}, Label::LexAlternates1R2); 
        m.insert(Index{nt:NT::LexAlternates, alt:1, pos:3}, Label::LexAlternates1R3); 
        m.insert(Index{nt:NT::LexBracket, alt:0, pos:0}, Label::LexBracket0R0); 
        m.insert(Index{nt:NT::LexBracket, alt:0, pos:1}, Label::LexBracket0R1); 
        m.insert(Index{nt:NT::LexBracket, alt:1, pos:0}, Label::LexBracket1R0); 
        m.insert(Index{nt:NT::LexBracket, alt:1, pos:1}, Label::LexBracket1R1); 
        m.insert(Index{nt:NT::LexBracket, alt:2, pos:0}, Label::LexBracket2R0); 
        m.insert(Index{nt:NT::LexBracket, alt:2, pos:1}, Label::LexBracket2R1); 
        m.insert(Index{nt:NT::LexBracket, alt:3, pos:0}, Label::LexBracket3R0); 
        m.insert(Index{nt:NT::LexBracket, alt:3, pos:1}, Label::LexBracket3R1); 
        m.insert(Index{nt:NT::LexGroup, alt:0, pos:0}, Label::LexGroup0R0); 
        m.insert(Index{nt:NT::LexGroup, alt:0, pos:1}, Label::LexGroup0R1); 
        m.insert(Index{nt:NT::LexGroup, alt:0, pos:2}, Label::LexGroup0R2); 
        m.insert(Index{nt:NT::LexGroup, alt:0, pos:3}, Label::LexGroup0R3); 
        m.insert(Index{nt:NT::LexOneOrMore, alt:0, pos:0}, Label::LexOneOrMore0R0); 
        m.insert(Index{nt:NT::LexOneOrMore, alt:0, pos:1}, Label::LexOneOrMore0R1); 
        m.insert(Index{nt:NT::LexOneOrMore, alt:0, pos:2}, Label::LexOneOrMore0R2); 
        m.insert(Index{nt:NT::LexOneOrMore, alt:0, pos:3}, Label::LexOneOrMore0R3); 
        m.insert(Index{nt:NT::LexOptional, alt:0, pos:0}, Label::LexOptional0R0); 
        m.insert(Index{nt:NT::LexOptional, alt:0, pos:1}, Label::LexOptional0R1); 
        m.insert(Index{nt:NT::LexOptional, alt:0, pos:2}, Label::LexOptional0R2); 
        m.insert(Index{nt:NT::LexOptional, alt:0, pos:3}, Label::LexOptional0R3); 
        m.insert(Index{nt:NT::LexRule, alt:0, pos:0}, Label::LexRule0R0); 
        m.insert(Index{nt:NT::LexRule, alt:0, pos:1}, Label::LexRule0R1); 
        m.insert(Index{nt:NT::LexRule, alt:0, pos:2}, Label::LexRule0R2); 
        m.insert(Index{nt:NT::LexRule, alt:0, pos:3}, Label::LexRule0R3); 
        m.insert(Index{nt:NT::LexRule, alt:0, pos:4}, Label::LexRule0R4); 
        m.insert(Index{nt:NT::LexSymbol, alt:0, pos:0}, Label::LexSymbol0R0); 
        m.insert(Index{nt:NT::LexSymbol, alt:0, pos:1}, Label::LexSymbol0R1); 
        m.insert(Index{nt:NT::LexSymbol, alt:1, pos:0}, Label::LexSymbol1R0); 
        m.insert(Index{nt:NT::LexSymbol, alt:1, pos:1}, Label::LexSymbol1R1); 
        m.insert(Index{nt:NT::LexSymbol, alt:1, pos:2}, Label::LexSymbol1R2); 
        m.insert(Index{nt:NT::LexSymbol, alt:2, pos:0}, Label::LexSymbol2R0); 
        m.insert(Index{nt:NT::LexSymbol, alt:2, pos:1}, Label::LexSymbol2R1); 
        m.insert(Index{nt:NT::LexSymbol, alt:3, pos:0}, Label::LexSymbol3R0); 
        m.insert(Index{nt:NT::LexSymbol, alt:3, pos:1}, Label::LexSymbol3R1); 
        m.insert(Index{nt:NT::LexSymbol, alt:4, pos:0}, Label::LexSymbol4R0); 
        m.insert(Index{nt:NT::LexSymbol, alt:4, pos:1}, Label::LexSymbol4R1); 
        m.insert(Index{nt:NT::LexSymbol, alt:4, pos:2}, Label::LexSymbol4R2); 
        m.insert(Index{nt:NT::LexSymbol, alt:5, pos:0}, Label::LexSymbol5R0); 
        m.insert(Index{nt:NT::LexSymbol, alt:5, pos:1}, Label::LexSymbol5R1); 
        m.insert(Index{nt:NT::LexZeroOrMore, alt:0, pos:0}, Label::LexZeroOrMore0R0); 
        m.insert(Index{nt:NT::LexZeroOrMore, alt:0, pos:1}, Label::LexZeroOrMore0R1); 
        m.insert(Index{nt:NT::LexZeroOrMore, alt:0, pos:2}, Label::LexZeroOrMore0R2); 
        m.insert(Index{nt:NT::LexZeroOrMore, alt:0, pos:3}, Label::LexZeroOrMore0R3); 
        m.insert(Index{nt:NT::Package, alt:0, pos:0}, Label::Package0R0); 
        m.insert(Index{nt:NT::Package, alt:0, pos:1}, Label::Package0R1); 
        m.insert(Index{nt:NT::Package, alt:0, pos:2}, Label::Package0R2); 
        m.insert(Index{nt:NT::RegExp, alt:0, pos:0}, Label::RegExp0R0); 
        m.insert(Index{nt:NT::RegExp, alt:0, pos:1}, Label::RegExp0R1); 
        m.insert(Index{nt:NT::RegExp, alt:1, pos:0}, Label::RegExp1R0); 
        m.insert(Index{nt:NT::RegExp, alt:1, pos:1}, Label::RegExp1R1); 
        m.insert(Index{nt:NT::RegExp, alt:1, pos:2}, Label::RegExp1R2); 
        m.insert(Index{nt:NT::Rule, alt:0, pos:0}, Label::Rule0R0); 
        m.insert(Index{nt:NT::Rule, alt:0, pos:1}, Label::Rule0R1); 
        m.insert(Index{nt:NT::Rule, alt:1, pos:0}, Label::Rule1R0); 
        m.insert(Index{nt:NT::Rule, alt:1, pos:1}, Label::Rule1R1); 
        m.insert(Index{nt:NT::Rules, alt:0, pos:0}, Label::Rules0R0); 
        m.insert(Index{nt:NT::Rules, alt:0, pos:1}, Label::Rules0R1); 
        m.insert(Index{nt:NT::Rules, alt:1, pos:0}, Label::Rules1R0); 
        m.insert(Index{nt:NT::Rules, alt:1, pos:1}, Label::Rules1R1); 
        m.insert(Index{nt:NT::Rules, alt:1, pos:2}, Label::Rules1R2); 
        m.insert(Index{nt:NT::SyntaxAlternate, alt:0, pos:0}, Label::SyntaxAlternate0R0); 
        m.insert(Index{nt:NT::SyntaxAlternate, alt:0, pos:1}, Label::SyntaxAlternate0R1); 
        m.insert(Index{nt:NT::SyntaxAlternate, alt:1, pos:0}, Label::SyntaxAlternate1R0); 
        m.insert(Index{nt:NT::SyntaxAlternate, alt:1, pos:1}, Label::SyntaxAlternate1R1); 
        m.insert(Index{nt:NT::SyntaxAlternates, alt:0, pos:0}, Label::SyntaxAlternates0R0); 
        m.insert(Index{nt:NT::SyntaxAlternates, alt:0, pos:1}, Label::SyntaxAlternates0R1); 
        m.insert(Index{nt:NT::SyntaxAlternates, alt:1, pos:0}, Label::SyntaxAlternates1R0); 
        m.insert(Index{nt:NT::SyntaxAlternates, alt:1, pos:1}, Label::SyntaxAlternates1R1); 
        m.insert(Index{nt:NT::SyntaxAlternates, alt:1, pos:2}, Label::SyntaxAlternates1R2); 
        m.insert(Index{nt:NT::SyntaxAlternates, alt:1, pos:3}, Label::SyntaxAlternates1R3); 
        m.insert(Index{nt:NT::SyntaxRule, alt:0, pos:0}, Label::SyntaxRule0R0); 
        m.insert(Index{nt:NT::SyntaxRule, alt:0, pos:1}, Label::SyntaxRule0R1); 
        m.insert(Index{nt:NT::SyntaxRule, alt:0, pos:2}, Label::SyntaxRule0R2); 
        m.insert(Index{nt:NT::SyntaxRule, alt:0, pos:3}, Label::SyntaxRule0R3); 
        m.insert(Index{nt:NT::SyntaxRule, alt:0, pos:4}, Label::SyntaxRule0R4); 
        m.insert(Index{nt:NT::SyntaxSymbol, alt:0, pos:0}, Label::SyntaxSymbol0R0); 
        m.insert(Index{nt:NT::SyntaxSymbol, alt:0, pos:1}, Label::SyntaxSymbol0R1); 
        m.insert(Index{nt:NT::SyntaxSymbol, alt:1, pos:0}, Label::SyntaxSymbol1R0); 
        m.insert(Index{nt:NT::SyntaxSymbol, alt:1, pos:1}, Label::SyntaxSymbol1R1); 
        m.insert(Index{nt:NT::SyntaxSymbol, alt:2, pos:0}, Label::SyntaxSymbol2R0); 
        m.insert(Index{nt:NT::SyntaxSymbol, alt:2, pos:1}, Label::SyntaxSymbol2R1); 
        m.insert(Index{nt:NT::SyntaxSymbols, alt:0, pos:0}, Label::SyntaxSymbols0R0); 
        m.insert(Index{nt:NT::SyntaxSymbols, alt:0, pos:1}, Label::SyntaxSymbols0R1); 
        m.insert(Index{nt:NT::SyntaxSymbols, alt:1, pos:0}, Label::SyntaxSymbols1R0); 
        m.insert(Index{nt:NT::SyntaxSymbols, alt:1, pos:1}, Label::SyntaxSymbols1R1); 
        m.insert(Index{nt:NT::SyntaxSymbols, alt:1, pos:2}, Label::SyntaxSymbols1R2); 
        m.insert(Index{nt:NT::UnicodeClass, alt:0, pos:0}, Label::UnicodeClass0R0); 
        m.insert(Index{nt:NT::UnicodeClass, alt:0, pos:1}, Label::UnicodeClass0R1); 
        m.insert(Index{nt:NT::UnicodeClass, alt:1, pos:0}, Label::UnicodeClass1R0); 
        m.insert(Index{nt:NT::UnicodeClass, alt:1, pos:1}, Label::UnicodeClass1R1); 
        m.insert(Index{nt:NT::UnicodeClass, alt:2, pos:0}, Label::UnicodeClass2R0); 
        m.insert(Index{nt:NT::UnicodeClass, alt:2, pos:1}, Label::UnicodeClass2R1); 
        m.insert(Index{nt:NT::UnicodeClass, alt:3, pos:0}, Label::UnicodeClass3R0); 
        m.insert(Index{nt:NT::UnicodeClass, alt:3, pos:1}, Label::UnicodeClass3R1); 
        m
    };

    static ref SLOTS: HashMap<Label, Slot> = {
        let mut m = HashMap::new(); 
        // GoGLL : ∙Package Rules 
        m.insert(Label::GoGLL0R0, 
            Slot{
                nt: NT::GoGLL,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::Package), 
                    Symbol::NT(NT::Rules), 
                ],
                label: Label::GoGLL0R0,
            });
        // GoGLL : Package ∙Rules 
        m.insert(Label::GoGLL0R1, 
            Slot{
                nt: NT::GoGLL,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::Package), 
                    Symbol::NT(NT::Rules), 
                ],
                label: Label::GoGLL0R1,
            });
        // GoGLL : Package Rules ∙
        m.insert(Label::GoGLL0R2, 
            Slot{
                nt: NT::GoGLL,
                alt: 0,
                pos: 2,
                symbols: vec![ 
                    Symbol::NT(NT::Package), 
                    Symbol::NT(NT::Rules), 
                ],
                label: Label::GoGLL0R2,
            });
        // LexAlternates : ∙RegExp 
        m.insert(Label::LexAlternates0R0, 
            Slot{
                nt: NT::LexAlternates,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::RegExp), 
                ],
                label: Label::LexAlternates0R0,
            });
        // LexAlternates : RegExp ∙
        m.insert(Label::LexAlternates0R1, 
            Slot{
                nt: NT::LexAlternates,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::RegExp), 
                ],
                label: Label::LexAlternates0R1,
            });
        // LexAlternates : ∙RegExp | LexAlternates 
        m.insert(Label::LexAlternates1R0, 
            Slot{
                nt: NT::LexAlternates,
                alt: 1,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::RegExp), 
                    Symbol::T(T::T22), 
                    Symbol::NT(NT::LexAlternates), 
                ],
                label: Label::LexAlternates1R0,
            });
        // LexAlternates : RegExp ∙| LexAlternates 
        m.insert(Label::LexAlternates1R1, 
            Slot{
                nt: NT::LexAlternates,
                alt: 1,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::RegExp), 
                    Symbol::T(T::T22), 
                    Symbol::NT(NT::LexAlternates), 
                ],
                label: Label::LexAlternates1R1,
            });
        // LexAlternates : RegExp | ∙LexAlternates 
        m.insert(Label::LexAlternates1R2, 
            Slot{
                nt: NT::LexAlternates,
                alt: 1,
                pos: 2,
                symbols: vec![ 
                    Symbol::NT(NT::RegExp), 
                    Symbol::T(T::T22), 
                    Symbol::NT(NT::LexAlternates), 
                ],
                label: Label::LexAlternates1R2,
            });
        // LexAlternates : RegExp | LexAlternates ∙
        m.insert(Label::LexAlternates1R3, 
            Slot{
                nt: NT::LexAlternates,
                alt: 1,
                pos: 3,
                symbols: vec![ 
                    Symbol::NT(NT::RegExp), 
                    Symbol::T(T::T22), 
                    Symbol::NT(NT::LexAlternates), 
                ],
                label: Label::LexAlternates1R3,
            });
        // LexBracket : ∙LexGroup 
        m.insert(Label::LexBracket0R0, 
            Slot{
                nt: NT::LexBracket,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::LexGroup), 
                ],
                label: Label::LexBracket0R0,
            });
        // LexBracket : LexGroup ∙
        m.insert(Label::LexBracket0R1, 
            Slot{
                nt: NT::LexBracket,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::LexGroup), 
                ],
                label: Label::LexBracket0R1,
            });
        // LexBracket : ∙LexOptional 
        m.insert(Label::LexBracket1R0, 
            Slot{
                nt: NT::LexBracket,
                alt: 1,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::LexOptional), 
                ],
                label: Label::LexBracket1R0,
            });
        // LexBracket : LexOptional ∙
        m.insert(Label::LexBracket1R1, 
            Slot{
                nt: NT::LexBracket,
                alt: 1,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::LexOptional), 
                ],
                label: Label::LexBracket1R1,
            });
        // LexBracket : ∙LexZeroOrMore 
        m.insert(Label::LexBracket2R0, 
            Slot{
                nt: NT::LexBracket,
                alt: 2,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::LexZeroOrMore), 
                ],
                label: Label::LexBracket2R0,
            });
        // LexBracket : LexZeroOrMore ∙
        m.insert(Label::LexBracket2R1, 
            Slot{
                nt: NT::LexBracket,
                alt: 2,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::LexZeroOrMore), 
                ],
                label: Label::LexBracket2R1,
            });
        // LexBracket : ∙LexOneOrMore 
        m.insert(Label::LexBracket3R0, 
            Slot{
                nt: NT::LexBracket,
                alt: 3,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::LexOneOrMore), 
                ],
                label: Label::LexBracket3R0,
            });
        // LexBracket : LexOneOrMore ∙
        m.insert(Label::LexBracket3R1, 
            Slot{
                nt: NT::LexBracket,
                alt: 3,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::LexOneOrMore), 
                ],
                label: Label::LexBracket3R1,
            });
        // LexGroup : ∙( LexAlternates ) 
        m.insert(Label::LexGroup0R0, 
            Slot{
                nt: NT::LexGroup,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T0), 
                    Symbol::NT(NT::LexAlternates), 
                    Symbol::T(T::T1), 
                ],
                label: Label::LexGroup0R0,
            });
        // LexGroup : ( ∙LexAlternates ) 
        m.insert(Label::LexGroup0R1, 
            Slot{
                nt: NT::LexGroup,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T0), 
                    Symbol::NT(NT::LexAlternates), 
                    Symbol::T(T::T1), 
                ],
                label: Label::LexGroup0R1,
            });
        // LexGroup : ( LexAlternates ∙) 
        m.insert(Label::LexGroup0R2, 
            Slot{
                nt: NT::LexGroup,
                alt: 0,
                pos: 2,
                symbols: vec![ 
                    Symbol::T(T::T0), 
                    Symbol::NT(NT::LexAlternates), 
                    Symbol::T(T::T1), 
                ],
                label: Label::LexGroup0R2,
            });
        // LexGroup : ( LexAlternates ) ∙
        m.insert(Label::LexGroup0R3, 
            Slot{
                nt: NT::LexGroup,
                alt: 0,
                pos: 3,
                symbols: vec![ 
                    Symbol::T(T::T0), 
                    Symbol::NT(NT::LexAlternates), 
                    Symbol::T(T::T1), 
                ],
                label: Label::LexGroup0R3,
            });
        // LexOneOrMore : ∙< LexAlternates > 
        m.insert(Label::LexOneOrMore0R0, 
            Slot{
                nt: NT::LexOneOrMore,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T5), 
                    Symbol::NT(NT::LexAlternates), 
                    Symbol::T(T::T6), 
                ],
                label: Label::LexOneOrMore0R0,
            });
        // LexOneOrMore : < ∙LexAlternates > 
        m.insert(Label::LexOneOrMore0R1, 
            Slot{
                nt: NT::LexOneOrMore,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T5), 
                    Symbol::NT(NT::LexAlternates), 
                    Symbol::T(T::T6), 
                ],
                label: Label::LexOneOrMore0R1,
            });
        // LexOneOrMore : < LexAlternates ∙> 
        m.insert(Label::LexOneOrMore0R2, 
            Slot{
                nt: NT::LexOneOrMore,
                alt: 0,
                pos: 2,
                symbols: vec![ 
                    Symbol::T(T::T5), 
                    Symbol::NT(NT::LexAlternates), 
                    Symbol::T(T::T6), 
                ],
                label: Label::LexOneOrMore0R2,
            });
        // LexOneOrMore : < LexAlternates > ∙
        m.insert(Label::LexOneOrMore0R3, 
            Slot{
                nt: NT::LexOneOrMore,
                alt: 0,
                pos: 3,
                symbols: vec![ 
                    Symbol::T(T::T5), 
                    Symbol::NT(NT::LexAlternates), 
                    Symbol::T(T::T6), 
                ],
                label: Label::LexOneOrMore0R3,
            });
        // LexOptional : ∙[ LexAlternates ] 
        m.insert(Label::LexOptional0R0, 
            Slot{
                nt: NT::LexOptional,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T7), 
                    Symbol::NT(NT::LexAlternates), 
                    Symbol::T(T::T8), 
                ],
                label: Label::LexOptional0R0,
            });
        // LexOptional : [ ∙LexAlternates ] 
        m.insert(Label::LexOptional0R1, 
            Slot{
                nt: NT::LexOptional,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T7), 
                    Symbol::NT(NT::LexAlternates), 
                    Symbol::T(T::T8), 
                ],
                label: Label::LexOptional0R1,
            });
        // LexOptional : [ LexAlternates ∙] 
        m.insert(Label::LexOptional0R2, 
            Slot{
                nt: NT::LexOptional,
                alt: 0,
                pos: 2,
                symbols: vec![ 
                    Symbol::T(T::T7), 
                    Symbol::NT(NT::LexAlternates), 
                    Symbol::T(T::T8), 
                ],
                label: Label::LexOptional0R2,
            });
        // LexOptional : [ LexAlternates ] ∙
        m.insert(Label::LexOptional0R3, 
            Slot{
                nt: NT::LexOptional,
                alt: 0,
                pos: 3,
                symbols: vec![ 
                    Symbol::T(T::T7), 
                    Symbol::NT(NT::LexAlternates), 
                    Symbol::T(T::T8), 
                ],
                label: Label::LexOptional0R3,
            });
        // LexRule : ∙tokid : RegExp ; 
        m.insert(Label::LexRule0R0, 
            Slot{
                nt: NT::LexRule,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T19), 
                    Symbol::T(T::T3), 
                    Symbol::NT(NT::RegExp), 
                    Symbol::T(T::T4), 
                ],
                label: Label::LexRule0R0,
            });
        // LexRule : tokid ∙: RegExp ; 
        m.insert(Label::LexRule0R1, 
            Slot{
                nt: NT::LexRule,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T19), 
                    Symbol::T(T::T3), 
                    Symbol::NT(NT::RegExp), 
                    Symbol::T(T::T4), 
                ],
                label: Label::LexRule0R1,
            });
        // LexRule : tokid : ∙RegExp ; 
        m.insert(Label::LexRule0R2, 
            Slot{
                nt: NT::LexRule,
                alt: 0,
                pos: 2,
                symbols: vec![ 
                    Symbol::T(T::T19), 
                    Symbol::T(T::T3), 
                    Symbol::NT(NT::RegExp), 
                    Symbol::T(T::T4), 
                ],
                label: Label::LexRule0R2,
            });
        // LexRule : tokid : RegExp ∙; 
        m.insert(Label::LexRule0R3, 
            Slot{
                nt: NT::LexRule,
                alt: 0,
                pos: 3,
                symbols: vec![ 
                    Symbol::T(T::T19), 
                    Symbol::T(T::T3), 
                    Symbol::NT(NT::RegExp), 
                    Symbol::T(T::T4), 
                ],
                label: Label::LexRule0R3,
            });
        // LexRule : tokid : RegExp ; ∙
        m.insert(Label::LexRule0R4, 
            Slot{
                nt: NT::LexRule,
                alt: 0,
                pos: 4,
                symbols: vec![ 
                    Symbol::T(T::T19), 
                    Symbol::T(T::T3), 
                    Symbol::NT(NT::RegExp), 
                    Symbol::T(T::T4), 
                ],
                label: Label::LexRule0R4,
            });
        // LexSymbol : ∙. 
        m.insert(Label::LexSymbol0R0, 
            Slot{
                nt: NT::LexSymbol,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T2), 
                ],
                label: Label::LexSymbol0R0,
            });
        // LexSymbol : . ∙
        m.insert(Label::LexSymbol0R1, 
            Slot{
                nt: NT::LexSymbol,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T2), 
                ],
                label: Label::LexSymbol0R1,
            });
        // LexSymbol : ∙any string_lit 
        m.insert(Label::LexSymbol1R0, 
            Slot{
                nt: NT::LexSymbol,
                alt: 1,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T9), 
                    Symbol::T(T::T18), 
                ],
                label: Label::LexSymbol1R0,
            });
        // LexSymbol : any ∙string_lit 
        m.insert(Label::LexSymbol1R1, 
            Slot{
                nt: NT::LexSymbol,
                alt: 1,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T9), 
                    Symbol::T(T::T18), 
                ],
                label: Label::LexSymbol1R1,
            });
        // LexSymbol : any string_lit ∙
        m.insert(Label::LexSymbol1R2, 
            Slot{
                nt: NT::LexSymbol,
                alt: 1,
                pos: 2,
                symbols: vec![ 
                    Symbol::T(T::T9), 
                    Symbol::T(T::T18), 
                ],
                label: Label::LexSymbol1R2,
            });
        // LexSymbol : ∙char_lit 
        m.insert(Label::LexSymbol2R0, 
            Slot{
                nt: NT::LexSymbol,
                alt: 2,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T10), 
                ],
                label: Label::LexSymbol2R0,
            });
        // LexSymbol : char_lit ∙
        m.insert(Label::LexSymbol2R1, 
            Slot{
                nt: NT::LexSymbol,
                alt: 2,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T10), 
                ],
                label: Label::LexSymbol2R1,
            });
        // LexSymbol : ∙LexBracket 
        m.insert(Label::LexSymbol3R0, 
            Slot{
                nt: NT::LexSymbol,
                alt: 3,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::LexBracket), 
                ],
                label: Label::LexSymbol3R0,
            });
        // LexSymbol : LexBracket ∙
        m.insert(Label::LexSymbol3R1, 
            Slot{
                nt: NT::LexSymbol,
                alt: 3,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::LexBracket), 
                ],
                label: Label::LexSymbol3R1,
            });
        // LexSymbol : ∙not string_lit 
        m.insert(Label::LexSymbol4R0, 
            Slot{
                nt: NT::LexSymbol,
                alt: 4,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T14), 
                    Symbol::T(T::T18), 
                ],
                label: Label::LexSymbol4R0,
            });
        // LexSymbol : not ∙string_lit 
        m.insert(Label::LexSymbol4R1, 
            Slot{
                nt: NT::LexSymbol,
                alt: 4,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T14), 
                    Symbol::T(T::T18), 
                ],
                label: Label::LexSymbol4R1,
            });
        // LexSymbol : not string_lit ∙
        m.insert(Label::LexSymbol4R2, 
            Slot{
                nt: NT::LexSymbol,
                alt: 4,
                pos: 2,
                symbols: vec![ 
                    Symbol::T(T::T14), 
                    Symbol::T(T::T18), 
                ],
                label: Label::LexSymbol4R2,
            });
        // LexSymbol : ∙UnicodeClass 
        m.insert(Label::LexSymbol5R0, 
            Slot{
                nt: NT::LexSymbol,
                alt: 5,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::UnicodeClass), 
                ],
                label: Label::LexSymbol5R0,
            });
        // LexSymbol : UnicodeClass ∙
        m.insert(Label::LexSymbol5R1, 
            Slot{
                nt: NT::LexSymbol,
                alt: 5,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::UnicodeClass), 
                ],
                label: Label::LexSymbol5R1,
            });
        // LexZeroOrMore : ∙{ LexAlternates } 
        m.insert(Label::LexZeroOrMore0R0, 
            Slot{
                nt: NT::LexZeroOrMore,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T21), 
                    Symbol::NT(NT::LexAlternates), 
                    Symbol::T(T::T23), 
                ],
                label: Label::LexZeroOrMore0R0,
            });
        // LexZeroOrMore : { ∙LexAlternates } 
        m.insert(Label::LexZeroOrMore0R1, 
            Slot{
                nt: NT::LexZeroOrMore,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T21), 
                    Symbol::NT(NT::LexAlternates), 
                    Symbol::T(T::T23), 
                ],
                label: Label::LexZeroOrMore0R1,
            });
        // LexZeroOrMore : { LexAlternates ∙} 
        m.insert(Label::LexZeroOrMore0R2, 
            Slot{
                nt: NT::LexZeroOrMore,
                alt: 0,
                pos: 2,
                symbols: vec![ 
                    Symbol::T(T::T21), 
                    Symbol::NT(NT::LexAlternates), 
                    Symbol::T(T::T23), 
                ],
                label: Label::LexZeroOrMore0R2,
            });
        // LexZeroOrMore : { LexAlternates } ∙
        m.insert(Label::LexZeroOrMore0R3, 
            Slot{
                nt: NT::LexZeroOrMore,
                alt: 0,
                pos: 3,
                symbols: vec![ 
                    Symbol::T(T::T21), 
                    Symbol::NT(NT::LexAlternates), 
                    Symbol::T(T::T23), 
                ],
                label: Label::LexZeroOrMore0R3,
            });
        // Package : ∙package string_lit 
        m.insert(Label::Package0R0, 
            Slot{
                nt: NT::Package,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T17), 
                    Symbol::T(T::T18), 
                ],
                label: Label::Package0R0,
            });
        // Package : package ∙string_lit 
        m.insert(Label::Package0R1, 
            Slot{
                nt: NT::Package,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T17), 
                    Symbol::T(T::T18), 
                ],
                label: Label::Package0R1,
            });
        // Package : package string_lit ∙
        m.insert(Label::Package0R2, 
            Slot{
                nt: NT::Package,
                alt: 0,
                pos: 2,
                symbols: vec![ 
                    Symbol::T(T::T17), 
                    Symbol::T(T::T18), 
                ],
                label: Label::Package0R2,
            });
        // RegExp : ∙LexSymbol 
        m.insert(Label::RegExp0R0, 
            Slot{
                nt: NT::RegExp,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::LexSymbol), 
                ],
                label: Label::RegExp0R0,
            });
        // RegExp : LexSymbol ∙
        m.insert(Label::RegExp0R1, 
            Slot{
                nt: NT::RegExp,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::LexSymbol), 
                ],
                label: Label::RegExp0R1,
            });
        // RegExp : ∙LexSymbol RegExp 
        m.insert(Label::RegExp1R0, 
            Slot{
                nt: NT::RegExp,
                alt: 1,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::LexSymbol), 
                    Symbol::NT(NT::RegExp), 
                ],
                label: Label::RegExp1R0,
            });
        // RegExp : LexSymbol ∙RegExp 
        m.insert(Label::RegExp1R1, 
            Slot{
                nt: NT::RegExp,
                alt: 1,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::LexSymbol), 
                    Symbol::NT(NT::RegExp), 
                ],
                label: Label::RegExp1R1,
            });
        // RegExp : LexSymbol RegExp ∙
        m.insert(Label::RegExp1R2, 
            Slot{
                nt: NT::RegExp,
                alt: 1,
                pos: 2,
                symbols: vec![ 
                    Symbol::NT(NT::LexSymbol), 
                    Symbol::NT(NT::RegExp), 
                ],
                label: Label::RegExp1R2,
            });
        // Rule : ∙LexRule 
        m.insert(Label::Rule0R0, 
            Slot{
                nt: NT::Rule,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::LexRule), 
                ],
                label: Label::Rule0R0,
            });
        // Rule : LexRule ∙
        m.insert(Label::Rule0R1, 
            Slot{
                nt: NT::Rule,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::LexRule), 
                ],
                label: Label::Rule0R1,
            });
        // Rule : ∙SyntaxRule 
        m.insert(Label::Rule1R0, 
            Slot{
                nt: NT::Rule,
                alt: 1,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::SyntaxRule), 
                ],
                label: Label::Rule1R0,
            });
        // Rule : SyntaxRule ∙
        m.insert(Label::Rule1R1, 
            Slot{
                nt: NT::Rule,
                alt: 1,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::SyntaxRule), 
                ],
                label: Label::Rule1R1,
            });
        // Rules : ∙Rule 
        m.insert(Label::Rules0R0, 
            Slot{
                nt: NT::Rules,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::Rule), 
                ],
                label: Label::Rules0R0,
            });
        // Rules : Rule ∙
        m.insert(Label::Rules0R1, 
            Slot{
                nt: NT::Rules,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::Rule), 
                ],
                label: Label::Rules0R1,
            });
        // Rules : ∙Rule Rules 
        m.insert(Label::Rules1R0, 
            Slot{
                nt: NT::Rules,
                alt: 1,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::Rule), 
                    Symbol::NT(NT::Rules), 
                ],
                label: Label::Rules1R0,
            });
        // Rules : Rule ∙Rules 
        m.insert(Label::Rules1R1, 
            Slot{
                nt: NT::Rules,
                alt: 1,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::Rule), 
                    Symbol::NT(NT::Rules), 
                ],
                label: Label::Rules1R1,
            });
        // Rules : Rule Rules ∙
        m.insert(Label::Rules1R2, 
            Slot{
                nt: NT::Rules,
                alt: 1,
                pos: 2,
                symbols: vec![ 
                    Symbol::NT(NT::Rule), 
                    Symbol::NT(NT::Rules), 
                ],
                label: Label::Rules1R2,
            });
        // SyntaxAlternate : ∙SyntaxSymbols 
        m.insert(Label::SyntaxAlternate0R0, 
            Slot{
                nt: NT::SyntaxAlternate,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::SyntaxSymbols), 
                ],
                label: Label::SyntaxAlternate0R0,
            });
        // SyntaxAlternate : SyntaxSymbols ∙
        m.insert(Label::SyntaxAlternate0R1, 
            Slot{
                nt: NT::SyntaxAlternate,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::SyntaxSymbols), 
                ],
                label: Label::SyntaxAlternate0R1,
            });
        // SyntaxAlternate : ∙empty 
        m.insert(Label::SyntaxAlternate1R0, 
            Slot{
                nt: NT::SyntaxAlternate,
                alt: 1,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T11), 
                ],
                label: Label::SyntaxAlternate1R0,
            });
        // SyntaxAlternate : empty ∙
        m.insert(Label::SyntaxAlternate1R1, 
            Slot{
                nt: NT::SyntaxAlternate,
                alt: 1,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T11), 
                ],
                label: Label::SyntaxAlternate1R1,
            });
        // SyntaxAlternates : ∙SyntaxAlternate 
        m.insert(Label::SyntaxAlternates0R0, 
            Slot{
                nt: NT::SyntaxAlternates,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::SyntaxAlternate), 
                ],
                label: Label::SyntaxAlternates0R0,
            });
        // SyntaxAlternates : SyntaxAlternate ∙
        m.insert(Label::SyntaxAlternates0R1, 
            Slot{
                nt: NT::SyntaxAlternates,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::SyntaxAlternate), 
                ],
                label: Label::SyntaxAlternates0R1,
            });
        // SyntaxAlternates : ∙SyntaxAlternate | SyntaxAlternates 
        m.insert(Label::SyntaxAlternates1R0, 
            Slot{
                nt: NT::SyntaxAlternates,
                alt: 1,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::SyntaxAlternate), 
                    Symbol::T(T::T22), 
                    Symbol::NT(NT::SyntaxAlternates), 
                ],
                label: Label::SyntaxAlternates1R0,
            });
        // SyntaxAlternates : SyntaxAlternate ∙| SyntaxAlternates 
        m.insert(Label::SyntaxAlternates1R1, 
            Slot{
                nt: NT::SyntaxAlternates,
                alt: 1,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::SyntaxAlternate), 
                    Symbol::T(T::T22), 
                    Symbol::NT(NT::SyntaxAlternates), 
                ],
                label: Label::SyntaxAlternates1R1,
            });
        // SyntaxAlternates : SyntaxAlternate | ∙SyntaxAlternates 
        m.insert(Label::SyntaxAlternates1R2, 
            Slot{
                nt: NT::SyntaxAlternates,
                alt: 1,
                pos: 2,
                symbols: vec![ 
                    Symbol::NT(NT::SyntaxAlternate), 
                    Symbol::T(T::T22), 
                    Symbol::NT(NT::SyntaxAlternates), 
                ],
                label: Label::SyntaxAlternates1R2,
            });
        // SyntaxAlternates : SyntaxAlternate | SyntaxAlternates ∙
        m.insert(Label::SyntaxAlternates1R3, 
            Slot{
                nt: NT::SyntaxAlternates,
                alt: 1,
                pos: 3,
                symbols: vec![ 
                    Symbol::NT(NT::SyntaxAlternate), 
                    Symbol::T(T::T22), 
                    Symbol::NT(NT::SyntaxAlternates), 
                ],
                label: Label::SyntaxAlternates1R3,
            });
        // SyntaxRule : ∙nt : SyntaxAlternates ; 
        m.insert(Label::SyntaxRule0R0, 
            Slot{
                nt: NT::SyntaxRule,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T15), 
                    Symbol::T(T::T3), 
                    Symbol::NT(NT::SyntaxAlternates), 
                    Symbol::T(T::T4), 
                ],
                label: Label::SyntaxRule0R0,
            });
        // SyntaxRule : nt ∙: SyntaxAlternates ; 
        m.insert(Label::SyntaxRule0R1, 
            Slot{
                nt: NT::SyntaxRule,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T15), 
                    Symbol::T(T::T3), 
                    Symbol::NT(NT::SyntaxAlternates), 
                    Symbol::T(T::T4), 
                ],
                label: Label::SyntaxRule0R1,
            });
        // SyntaxRule : nt : ∙SyntaxAlternates ; 
        m.insert(Label::SyntaxRule0R2, 
            Slot{
                nt: NT::SyntaxRule,
                alt: 0,
                pos: 2,
                symbols: vec![ 
                    Symbol::T(T::T15), 
                    Symbol::T(T::T3), 
                    Symbol::NT(NT::SyntaxAlternates), 
                    Symbol::T(T::T4), 
                ],
                label: Label::SyntaxRule0R2,
            });
        // SyntaxRule : nt : SyntaxAlternates ∙; 
        m.insert(Label::SyntaxRule0R3, 
            Slot{
                nt: NT::SyntaxRule,
                alt: 0,
                pos: 3,
                symbols: vec![ 
                    Symbol::T(T::T15), 
                    Symbol::T(T::T3), 
                    Symbol::NT(NT::SyntaxAlternates), 
                    Symbol::T(T::T4), 
                ],
                label: Label::SyntaxRule0R3,
            });
        // SyntaxRule : nt : SyntaxAlternates ; ∙
        m.insert(Label::SyntaxRule0R4, 
            Slot{
                nt: NT::SyntaxRule,
                alt: 0,
                pos: 4,
                symbols: vec![ 
                    Symbol::T(T::T15), 
                    Symbol::T(T::T3), 
                    Symbol::NT(NT::SyntaxAlternates), 
                    Symbol::T(T::T4), 
                ],
                label: Label::SyntaxRule0R4,
            });
        // SyntaxSymbol : ∙nt 
        m.insert(Label::SyntaxSymbol0R0, 
            Slot{
                nt: NT::SyntaxSymbol,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T15), 
                ],
                label: Label::SyntaxSymbol0R0,
            });
        // SyntaxSymbol : nt ∙
        m.insert(Label::SyntaxSymbol0R1, 
            Slot{
                nt: NT::SyntaxSymbol,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T15), 
                ],
                label: Label::SyntaxSymbol0R1,
            });
        // SyntaxSymbol : ∙tokid 
        m.insert(Label::SyntaxSymbol1R0, 
            Slot{
                nt: NT::SyntaxSymbol,
                alt: 1,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T19), 
                ],
                label: Label::SyntaxSymbol1R0,
            });
        // SyntaxSymbol : tokid ∙
        m.insert(Label::SyntaxSymbol1R1, 
            Slot{
                nt: NT::SyntaxSymbol,
                alt: 1,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T19), 
                ],
                label: Label::SyntaxSymbol1R1,
            });
        // SyntaxSymbol : ∙string_lit 
        m.insert(Label::SyntaxSymbol2R0, 
            Slot{
                nt: NT::SyntaxSymbol,
                alt: 2,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T18), 
                ],
                label: Label::SyntaxSymbol2R0,
            });
        // SyntaxSymbol : string_lit ∙
        m.insert(Label::SyntaxSymbol2R1, 
            Slot{
                nt: NT::SyntaxSymbol,
                alt: 2,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T18), 
                ],
                label: Label::SyntaxSymbol2R1,
            });
        // SyntaxSymbols : ∙SyntaxSymbol 
        m.insert(Label::SyntaxSymbols0R0, 
            Slot{
                nt: NT::SyntaxSymbols,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::SyntaxSymbol), 
                ],
                label: Label::SyntaxSymbols0R0,
            });
        // SyntaxSymbols : SyntaxSymbol ∙
        m.insert(Label::SyntaxSymbols0R1, 
            Slot{
                nt: NT::SyntaxSymbols,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::SyntaxSymbol), 
                ],
                label: Label::SyntaxSymbols0R1,
            });
        // SyntaxSymbols : ∙SyntaxSymbol SyntaxSymbols 
        m.insert(Label::SyntaxSymbols1R0, 
            Slot{
                nt: NT::SyntaxSymbols,
                alt: 1,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::SyntaxSymbol), 
                    Symbol::NT(NT::SyntaxSymbols), 
                ],
                label: Label::SyntaxSymbols1R0,
            });
        // SyntaxSymbols : SyntaxSymbol ∙SyntaxSymbols 
        m.insert(Label::SyntaxSymbols1R1, 
            Slot{
                nt: NT::SyntaxSymbols,
                alt: 1,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::SyntaxSymbol), 
                    Symbol::NT(NT::SyntaxSymbols), 
                ],
                label: Label::SyntaxSymbols1R1,
            });
        // SyntaxSymbols : SyntaxSymbol SyntaxSymbols ∙
        m.insert(Label::SyntaxSymbols1R2, 
            Slot{
                nt: NT::SyntaxSymbols,
                alt: 1,
                pos: 2,
                symbols: vec![ 
                    Symbol::NT(NT::SyntaxSymbol), 
                    Symbol::NT(NT::SyntaxSymbols), 
                ],
                label: Label::SyntaxSymbols1R2,
            });
        // UnicodeClass : ∙letter 
        m.insert(Label::UnicodeClass0R0, 
            Slot{
                nt: NT::UnicodeClass,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T12), 
                ],
                label: Label::UnicodeClass0R0,
            });
        // UnicodeClass : letter ∙
        m.insert(Label::UnicodeClass0R1, 
            Slot{
                nt: NT::UnicodeClass,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T12), 
                ],
                label: Label::UnicodeClass0R1,
            });
        // UnicodeClass : ∙upcase 
        m.insert(Label::UnicodeClass1R0, 
            Slot{
                nt: NT::UnicodeClass,
                alt: 1,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T20), 
                ],
                label: Label::UnicodeClass1R0,
            });
        // UnicodeClass : upcase ∙
        m.insert(Label::UnicodeClass1R1, 
            Slot{
                nt: NT::UnicodeClass,
                alt: 1,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T20), 
                ],
                label: Label::UnicodeClass1R1,
            });
        // UnicodeClass : ∙lowcase 
        m.insert(Label::UnicodeClass2R0, 
            Slot{
                nt: NT::UnicodeClass,
                alt: 2,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T13), 
                ],
                label: Label::UnicodeClass2R0,
            });
        // UnicodeClass : lowcase ∙
        m.insert(Label::UnicodeClass2R1, 
            Slot{
                nt: NT::UnicodeClass,
                alt: 2,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T13), 
                ],
                label: Label::UnicodeClass2R1,
            });
        // UnicodeClass : ∙number 
        m.insert(Label::UnicodeClass3R0, 
            Slot{
                nt: NT::UnicodeClass,
                alt: 3,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T16), 
                ],
                label: Label::UnicodeClass3R0,
            });
        // UnicodeClass : number ∙
        m.insert(Label::UnicodeClass3R1, 
            Slot{
                nt: NT::UnicodeClass,
                alt: 3,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T16), 
                ],
                label: Label::UnicodeClass3R1,
            });
        m
	};
}
